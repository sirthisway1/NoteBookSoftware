/* 实际的代码
  export default {
    data() {
      return {
        username: '这里填写用户名',
        notebooks: [], // 存储获取的笔记本详细信息
        currentPage: 1,
        totalPages: 1,
      };
    },
    computed: {
      sortedNotebooks() {
        return this.notebooks.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));
      }
    },
    methods: {
      goToStart() {
        this.$router.push({ name: 'Start' });
      },
      goToNotebook() {
        this.$router.push({ name: 'Notebook' });
      },
      goToCommunity() {
        this.$router.push({ name: 'Community' });
      },
      goToNotebookDetails(notebook) {
        const notebookPath = `/notebook/${notebook.notebookId}`;
         this.$router.push({ path: notebookPath });
      },  
      async editNotebookName(notebookId) { //修改笔记本名称
    const newTitle = prompt("请输入新的笔记本名称：");
    if (newTitle) {
      try {
        const response = await fetch(`/api/notebooks/${notebookId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title: newTitle })
        });
        const result = await response.json();
        if (result.code === 200) {
          alert("笔记本名称修改成功");
          this.notebooks = this.notebooks.map(notebook => 
            notebook.notebookId === notebookId ? { ...notebook, name: newTitle } : notebook
          );
        } else if (result.code === 501) {
          alert("token验证失败");
        } else if (result.code === 405) {
          alert("请求体不合法");
        } else if (result.code === 404) {
          alert("笔记本不存在");
        }
      } catch (error) {
        console.error('Error editing notebook name:', error);
      }
    }
  },
  async editNotebookSummary(notebookId) { //修改笔记本简介
    const newSummary = prompt("请输入新的笔记本简介：");
    if (newSummary) {
      try {
        const response = await fetch(`/api/notebooks/${notebookId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ summary: newSummary })
        });
        const result = await response.json();
        if (result.code === 200) {
          alert("笔记本简介修改成功");
          this.notebooks = this.notebooks.map(notebook => 
            notebook.notebookId === notebookId ? { ...notebook, summary: newSummary } : notebook
          );
        } else if (result.code === 501) {
          alert("token验证失败");
        } else if (result.code === 405) {
          alert("请求体不合法");
        } else if (result.code === 404) {
          alert("笔记本不存在");
        }
      } catch (error) {
        console.error('Error editing notebook summary:', error);
      }
    }
  },
  async deleteNotebook(notebookId) {
    if (confirm("确定要删除这个笔记本吗？")) { //删除笔记本
      try {
        const response = await fetch(`/api/notebooks/${notebookId}`, {
          method: 'DELETE'
        });
        const result = await response.json();
        if (result.code === 200) {
          alert("笔记本删除成功");
          this.notebooks = this.notebooks.filter(notebook => notebook.notebookId !== notebookId);
          this.updateTotalPages(); // 更新总页数
        } else if (result.code === 501) {
          alert("token验证失败");
        } else if (result.code === 405) {
          alert("请求体不合法");
        } else if (result.code === 404) {
          alert("笔记本不存在");
        }
      } catch (error) {
        console.error('Error deleting notebook:', error);
      }
    }
  },
      async fetchNotebooks() {
        // const token = localStorage.getItem('token');
        // if (!token) {
        //   alert('请先登录');
        //   return;
        // }
  
        try {
          const response = await fetch('/api/notebooks', {
            method: 'GET',
            // headers: {
            //   'Authorization': `Bearer ${token}`
            // }
          });
  
          
          const data = await response.json();
          if (data.code === 200) {
            const notebookIds = data.data.notebookIds;
            this.notebooks = await Promise.all(notebookIds.map(notebookId => this.fetchNotebookDetails(notebookId)));
          } else {
            alert('获取笔记本ID列表失败');
          }   
        } catch (error) {
          console.error('Error fetching notebook IDs:', error);
        }
      },  
      async fetchNotebookDetails(notebookId) {
        // const token = localStorage.getItem('token');
        try {
          const response = await fetch(`/api/notebooks/${notebookId}`, {
            method: 'GET',
            // headers: {
            //   'Authorization': `Bearer ${token}`
            // }
          });
  
          const data = await response.json();
          if (data.code === 200) {
            return data.data;
          }else if(data.code === 405) {
            alert(`获取笔记本详细信息失败: ${data.message}`);
            return null;
          }else {
            alert(`获取笔记本详细信息失败: ${data.message}`);
            return null;
          }
        } catch (error) {
          console.error(`Error fetching notebook details for ID ${notebookId}:`, error);
          return null;
        }   
      } ,  
      prevPage() {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.updateDisplayedNotebooks();
        }
      },
      nextPage() {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
          this.updateDisplayedNotebooks();
        }
      },
      goToPage(page) {
        this.currentPage = page;
        this.updateDisplayedNotebooks();
      },
      updateDisplayedNotebooks() {
        const notebooksPerPage = 4;
        this.totalPages = Math.ceil(this.notebooks.length / notebooksPerPage);
        this.displayedNotebooks = this.sortedNotebooks.slice((this.currentPage - 1) * notebooksPerPage, this.currentPage * notebooksPerPage);
      }
    },
    async mounted() {
      await this.fetchNotebooks();
      this.updateDisplayedNotebooks();
    }
  };

*/