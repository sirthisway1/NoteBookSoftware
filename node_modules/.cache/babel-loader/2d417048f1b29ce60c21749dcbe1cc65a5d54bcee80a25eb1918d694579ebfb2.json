{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n}\n;\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n  return diff_bisect_(text1, text2);\n}\n;\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 !== 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\n;\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n  return diffs.concat(diffsb);\n}\n;\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n  return pointermid;\n}\n;\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n  return pointermid;\n}\n;\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n;\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n}\n;\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([[DIFF_EQUAL, before], [DIFF_DELETE, oldMiddle], [DIFF_INSERT, newMiddle], [DIFF_EQUAL, after]]);\n}\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ? {\n    index: cursor_pos,\n    length: 0\n  } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ? null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  return null;\n}\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\nmodule.exports = diff;","map":{"version":3,"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","cursor_pos","_fix_unicode","editdiff","find_cursor_edit_diff","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","is_surrogate_pair_start","charCodeAt","slice","pointerend","is_surrogate_pair_end","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","fix_unicode","pointer","count_delete","count_insert","text_delete","text_insert","splice","previous_equality","ends_with_pair_start","stray","k","starts_with_pair_end","n","pop","changes","charCode","str","remove_empty_tuples","tuples","ret","make_edit_splice","before","oldMiddle","newMiddle","after","oldText","newText","oldRange","index","newRange","oldLength","newLength","oldCursor","oldBefore","oldAfter","maybeNewCursor","editBefore","newCursor","newBefore","newAfter","oldPrefix","newPrefix","editAfter","cursor","oldSuffix","newSuffix","replaceRange","diff","INSERT","DELETE","EQUAL","module","exports"],"sources":["C:/Users/Rome/Desktop/front/node_modules/fast-diff/diff.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}