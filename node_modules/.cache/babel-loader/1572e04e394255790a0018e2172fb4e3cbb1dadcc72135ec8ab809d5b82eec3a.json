{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* 实际的代码\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '这里填写用户名',\r\n      notebooks: [], // 存储获取的笔记本详细信息\r\n      currentPage: 1,\r\n      totalPages: 1,\r\n    };\r\n  },\r\n  computed: {\r\n    sortedNotebooks() {\r\n      return this.notebooks.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));\r\n    }\r\n  },\r\n  methods: {\r\n    goToStart() {\r\n      this.$router.push({ name: 'Start' });\r\n    },\r\n    goToNotebook() {\r\n      this.$router.push({ name: 'Notebook' });\r\n    },\r\n    goToCommunity() {\r\n      this.$router.push({ name: 'Community' });\r\n    },\r\n    goToNotebookDetails(notebook) {\r\n      const notebookPath = `/notebook/${notebook.notebookId}`;\r\n       this.$router.push({ path: notebookPath });\r\n    },  \r\n    async editNotebookName(notebookId) { //修改笔记本名称\r\n  const newTitle = prompt(\"请输入新的笔记本名称：\");\r\n  if (newTitle) {\r\n    try {\r\n      const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ title: newTitle })\r\n      });\r\n      const result = await response.json();\r\n      if (result.code === 200) {\r\n        alert(\"笔记本名称修改成功\");\r\n        this.notebooks = this.notebooks.map(notebook => \r\n          notebook.notebookId === notebookId ? { ...notebook, name: newTitle } : notebook\r\n        );\r\n      } else if (result.code === 501) {\r\n        alert(\"token验证失败\");\r\n      } else if (result.code === 405) {\r\n        alert(\"请求体不合法\");\r\n      } else if (result.code === 404) {\r\n        alert(\"笔记本不存在\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error editing notebook name:', error);\r\n    }\r\n  }\r\n},\r\nasync editNotebookSummary(notebookId) { //修改笔记本简介\r\n  const newSummary = prompt(\"请输入新的笔记本简介：\");\r\n  if (newSummary) {\r\n    try {\r\n      const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ summary: newSummary })\r\n      });\r\n      const result = await response.json();\r\n      if (result.code === 200) {\r\n        alert(\"笔记本简介修改成功\");\r\n        this.notebooks = this.notebooks.map(notebook => \r\n          notebook.notebookId === notebookId ? { ...notebook, summary: newSummary } : notebook\r\n        );\r\n      } else if (result.code === 501) {\r\n        alert(\"token验证失败\");\r\n      } else if (result.code === 405) {\r\n        alert(\"请求体不合法\");\r\n      } else if (result.code === 404) {\r\n        alert(\"笔记本不存在\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error editing notebook summary:', error);\r\n    }\r\n  }\r\n},\r\nasync deleteNotebook(notebookId) {\r\n  if (confirm(\"确定要删除这个笔记本吗？\")) { //删除笔记本\r\n    try {\r\n      const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n        method: 'DELETE'\r\n      });\r\n      const result = await response.json();\r\n      if (result.code === 200) {\r\n        alert(\"笔记本删除成功\");\r\n        this.notebooks = this.notebooks.filter(notebook => notebook.notebookId !== notebookId);\r\n        this.updateTotalPages(); // 更新总页数\r\n      } else if (result.code === 501) {\r\n        alert(\"token验证失败\");\r\n      } else if (result.code === 405) {\r\n        alert(\"请求体不合法\");\r\n      } else if (result.code === 404) {\r\n        alert(\"笔记本不存在\");\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting notebook:', error);\r\n    }\r\n  }\r\n},\r\n    async fetchNotebooks() {\r\n      // const token = localStorage.getItem('token');\r\n      // if (!token) {\r\n      //   alert('请先登录');\r\n      //   return;\r\n      // }\r\n\r\n      try {\r\n        const response = await fetch('/api/notebooks', {\r\n          method: 'GET',\r\n          // headers: {\r\n          //   'Authorization': `Bearer ${token}`\r\n          // }\r\n        });\r\n\r\n        \r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          const notebookIds = data.data.notebookIds;\r\n          this.notebooks = await Promise.all(notebookIds.map(notebookId => this.fetchNotebookDetails(notebookId)));\r\n        } else {\r\n          alert('获取笔记本ID列表失败');\r\n        }   \r\n      } catch (error) {\r\n        console.error('Error fetching notebook IDs:', error);\r\n      }\r\n    },  \r\n    async fetchNotebookDetails(notebookId) {\r\n      // const token = localStorage.getItem('token');\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'GET',\r\n          // headers: {\r\n          //   'Authorization': `Bearer ${token}`\r\n          // }\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          return data.data;\r\n        }else if(data.code === 405) {\r\n          alert(`获取笔记本详细信息失败: ${data.message}`);\r\n          return null;\r\n        }else {\r\n          alert(`获取笔记本详细信息失败: ${data.message}`);\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error fetching notebook details for ID ${notebookId}:`, error);\r\n        return null;\r\n      }   \r\n    } ,  \r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n        this.updateDisplayedNotebooks();\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n        this.updateDisplayedNotebooks();\r\n      }\r\n    },\r\n    goToPage(page) {\r\n      this.currentPage = page;\r\n      this.updateDisplayedNotebooks();\r\n    },\r\n    updateDisplayedNotebooks() {\r\n      const notebooksPerPage = 4;\r\n      this.totalPages = Math.ceil(this.notebooks.length / notebooksPerPage);\r\n      this.displayedNotebooks = this.sortedNotebooks.slice((this.currentPage - 1) * notebooksPerPage, this.currentPage * notebooksPerPage);\r\n    }\r\n  },\r\n  async mounted() {\r\n    await this.fetchNotebooks();\r\n    this.updateDisplayedNotebooks();\r\n  }\r\n};\r\n*/\n\n//假数据，测试用\nexport default {\n  data() {\n    return {\n      username: '这里填写用户名',\n      notebooks: [],\n      // 存储获取的笔记本详细信息\n      currentPage: 1,\n      totalPages: 1\n    };\n  },\n  computed: {\n    sortedNotebooks() {\n      return this.notebooks.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));\n    },\n    paginatedNotebooks() {\n      const notebooksPerPage = 4;\n      const startIndex = (this.currentPage - 1) * notebooksPerPage;\n      const endIndex = startIndex + notebooksPerPage;\n      return this.sortedNotebooks.slice(startIndex, endIndex);\n    },\n    totalPagesArray() {\n      return Array.from({\n        length: this.totalPages\n      }, (v, k) => k + 1);\n    }\n  },\n  methods: {\n    goToStart() {\n      this.$router.push({\n        name: 'Start'\n      });\n    },\n    goToNotebook() {\n      this.$router.push({\n        name: 'Notebook'\n      });\n    },\n    goToCommunity() {\n      this.$router.push({\n        name: 'Community'\n      });\n    },\n    goToNotebookDetails(notebook) {\n      const notebookPath = `/notebook/${notebook.notebookId}`;\n      this.$router.push({\n        path: notebookPath\n      });\n    },\n    async editNotebookName(notebookId) {\n      //修改笔记本名称\n      const newTitle = prompt(\"请输入新的笔记本名称：\");\n      if (newTitle) {\n        try {\n          const response = await fetch(`/api/notebooks/${notebookId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              title: newTitle\n            })\n          });\n          const result = await response.json();\n          if (result.code === 200) {\n            if (1) {\n              alert(\"笔记本名称修改成功\");\n              this.notebooks = this.notebooks.map(notebook => notebook.notebookId === notebookId ? {\n                ...notebook,\n                name: newTitle\n              } : notebook);\n            } else if (result.code === 501) {\n              alert(\"token验证失败\");\n            } else if (result.code === 405) {\n              alert(\"请求体不合法\");\n            } else if (result.code === 404) {\n              alert(\"笔记本不存在\");\n            }\n          }\n        } catch (error) {\n          console.error('Error editing notebook name:', error);\n        }\n      }\n    },\n    async editNotebookSummary(notebookId) {\n      //修改笔记本简介\n      const newSummary = prompt(\"请输入新的笔记本简介：\");\n      if (newSummary) {\n        try {\n          const response = await fetch(`/api/notebooks/${notebookId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              summary: newSummary\n            })\n          });\n          const result = await response.json();\n          if (result.code === 200) {\n            alert(\"笔记本简介修改成功\");\n            this.notebooks = this.notebooks.map(notebook => notebook.notebookId === notebookId ? {\n              ...notebook,\n              summary: newSummary\n            } : notebook);\n          } else if (result.code === 501) {\n            alert(\"token验证失败\");\n          } else if (result.code === 405) {\n            alert(\"请求体不合法\");\n          } else if (result.code === 404) {\n            alert(\"笔记本不存在\");\n          }\n        } catch (error) {\n          console.error('Error editing notebook summary:', error);\n        }\n      }\n    },\n    async deleteNotebook(notebookId) {\n      if (confirm(\"确定要删除这个笔记本吗？\")) {\n        //删除笔记本\n        try {\n          const response = await fetch(`/api/notebooks/${notebookId}`, {\n            method: 'DELETE'\n          });\n          const result = await response.json();\n          if (result.code === 200) {\n            alert(\"笔记本删除成功\");\n            this.notebooks = this.notebooks.filter(notebook => notebook.notebookId !== notebookId);\n            this.updateTotalPages(); // 更新总页数\n          } else if (result.code === 501) {\n            alert(\"token验证失败\");\n          } else if (result.code === 405) {\n            alert(\"请求体不合法\");\n          } else if (result.code === 404) {\n            alert(\"笔记本不存在\");\n          }\n        } catch (error) {\n          console.error('Error deleting notebook:', error);\n        }\n      }\n    },\n    async fetchNotebooks() {\n      try {\n        // 模拟延迟\n        await new Promise(resolve => setTimeout(resolve, 500));\n        // 模拟获取的笔记本ID列表\n        const notebookIds = [1, 2, 3, 4, 5, 6];\n        this.notebooks = await Promise.all(notebookIds.map(notebookId => this.fetchNotebookDetails(notebookId)));\n        this.updateTotalPages(); // 更新总页数\n      } catch (error) {\n        console.error('Error fetching notebook IDs:', error);\n      }\n    },\n    async fetchNotebookDetails(notebookId) {\n      try {\n        // 模拟延迟\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // 模拟获取的笔记本详细信息\n        const mockNotebookDetails = {\n          1: {\n            notebookId: 1,\n            name: 'Notebook 1',\n            summary: 'This is the first notebook',\n            lastModified: '2023-06-01T12:00:00Z'\n          },\n          2: {\n            notebookId: 2,\n            name: 'Notebook 2',\n            summary: 'This is the second notebook',\n            lastModified: '2023-06-02T12:00:00Z'\n          },\n          3: {\n            notebookId: 3,\n            name: 'Notebook 3',\n            summary: 'This is the third notebook',\n            lastModified: '2023-06-03T12:00:00Z'\n          },\n          4: {\n            notebookId: 4,\n            name: 'Notebook 4',\n            summary: 'This is the fourth notebook',\n            lastModified: '2023-06-04T12:00:00Z'\n          },\n          5: {\n            notebookId: 5,\n            name: 'Notebook 5',\n            summary: 'This is the fifth notebook',\n            lastModified: '2023-06-05T12:00:00Z'\n          },\n          6: {\n            notebookId: 6,\n            name: 'Notebook 6',\n            summary: 'This is the sixth notebook',\n            lastModified: '2023-06-06T12:00:00Z'\n          }\n        };\n        const notebookDetails = mockNotebookDetails[notebookId];\n        return notebookDetails;\n      } catch (error) {\n        console.error(`Error fetching notebook details for ID ${notebookId}:`, error);\n        return null;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    goToPage(page) {\n      this.currentPage = page;\n    },\n    updateTotalPages() {\n      const notebooksPerPage = 4;\n      this.totalPages = Math.ceil(this.notebooks.length / notebooksPerPage);\n    },\n    toggleDropdown(notebookId) {\n      const notebook = this.notebooks.find(nb => nb.notebookId === notebookId);\n      notebook.showDropdown = !notebook.showDropdown;\n    }\n  },\n  async mounted() {\n    await this.fetchNotebooks();\n  }\n};","map":{"version":3,"names":["data","username","notebooks","currentPage","totalPages","computed","sortedNotebooks","sort","a","b","Date","lastModified","paginatedNotebooks","notebooksPerPage","startIndex","endIndex","slice","totalPagesArray","Array","from","length","v","k","methods","goToStart","$router","push","name","goToNotebook","goToCommunity","goToNotebookDetails","notebook","notebookPath","notebookId","path","editNotebookName","newTitle","prompt","response","fetch","method","headers","body","JSON","stringify","title","result","json","code","alert","map","error","console","editNotebookSummary","newSummary","summary","deleteNotebook","confirm","filter","updateTotalPages","fetchNotebooks","Promise","resolve","setTimeout","notebookIds","all","fetchNotebookDetails","mockNotebookDetails","notebookDetails","prevPage","nextPage","goToPage","page","Math","ceil","toggleDropdown","find","nb","showDropdown","mounted"],"sources":["D:\\VUEitem\\front\\src\\components\\Notebook.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <div class=\"sidebar\">\r\n        <div class=\"sidebar-item\" id=\"username\">{{ username }}</div>\r\n        <div class=\"sidebar-item\" @click=\"goToStart\">开始</div>\r\n        <div class=\"sidebar-item notebook-button\" @click=\"goToNotebook\">\r\n          <div class=\"icon-placeholder\"></div>\r\n        <span>笔记本</span>\r\n        </div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">发现社区</div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">标签管理</div>\r\n      </div>\r\n      <div class=\"main-content\">\r\n        <div class=\"notebooks\">\r\n          <div v-for=\"notebook in paginatedNotebooks\" :key=\"notebook.notebookId\" class=\"notebook-wrapper\">\r\n            <div class=\"notebook\">\r\n              <div class=\"notebook-header\">\r\n                <div class=\"notebook-name\" @click=\"goToNotebookDetails(notebook)\">{{ notebook.name }}</div>\r\n                <div class=\"dropdown\">\r\n                  <button class=\"dropbtn\" @click.stop=\"toggleDropdown(notebook.notebookId)\">⚙️</button>\r\n                  <div class=\"dropdown-content\" v-if=\"notebook.showDropdown\">\r\n                    <div class=\"dropdown-item\" @click=\"editNotebookName(notebook.notebookId)\">修改笔记本名称</div>\r\n                    <div class=\"dropdown-item\" @click=\"editNotebookSummary(notebook.notebookId)\">修改笔记本简介</div>\r\n                    <div class=\"dropdown-item\" @click=\"deleteNotebook(notebook.notebookId)\">删除笔记本</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <hr class=\"separator\">\r\n              <div class=\"notebook-description\" @click=\"goToNotebookDetails(notebook)\">{{ notebook.summary }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"pagination\" v-if=\"totalPages > 1\">\r\n          <button @click=\"prevPage\" :disabled=\"currentPage === 1\">上一页</button>\r\n          <button v-for=\"page in totalPagesArray\" :key=\"page\" @click=\"goToPage(page)\">{{ page }}</button>\r\n          <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">下一页</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  \r\n  \r\n  <script>\r\n  /* 实际的代码\r\n  export default {\r\n    data() {\r\n      return {\r\n        username: '这里填写用户名',\r\n        notebooks: [], // 存储获取的笔记本详细信息\r\n        currentPage: 1,\r\n        totalPages: 1,\r\n      };\r\n    },\r\n    computed: {\r\n      sortedNotebooks() {\r\n        return this.notebooks.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));\r\n      }\r\n    },\r\n    methods: {\r\n      goToStart() {\r\n        this.$router.push({ name: 'Start' });\r\n      },\r\n      goToNotebook() {\r\n        this.$router.push({ name: 'Notebook' });\r\n      },\r\n      goToCommunity() {\r\n        this.$router.push({ name: 'Community' });\r\n      },\r\n      goToNotebookDetails(notebook) {\r\n        const notebookPath = `/notebook/${notebook.notebookId}`;\r\n         this.$router.push({ path: notebookPath });\r\n      },  \r\n      async editNotebookName(notebookId) { //修改笔记本名称\r\n    const newTitle = prompt(\"请输入新的笔记本名称：\");\r\n    if (newTitle) {\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ title: newTitle })\r\n        });\r\n        const result = await response.json();\r\n        if (result.code === 200) {\r\n          alert(\"笔记本名称修改成功\");\r\n          this.notebooks = this.notebooks.map(notebook => \r\n            notebook.notebookId === notebookId ? { ...notebook, name: newTitle } : notebook\r\n          );\r\n        } else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error editing notebook name:', error);\r\n      }\r\n    }\r\n  },\r\n  async editNotebookSummary(notebookId) { //修改笔记本简介\r\n    const newSummary = prompt(\"请输入新的笔记本简介：\");\r\n    if (newSummary) {\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ summary: newSummary })\r\n        });\r\n        const result = await response.json();\r\n        if (result.code === 200) {\r\n          alert(\"笔记本简介修改成功\");\r\n          this.notebooks = this.notebooks.map(notebook => \r\n            notebook.notebookId === notebookId ? { ...notebook, summary: newSummary } : notebook\r\n          );\r\n        } else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error editing notebook summary:', error);\r\n      }\r\n    }\r\n  },\r\n  async deleteNotebook(notebookId) {\r\n    if (confirm(\"确定要删除这个笔记本吗？\")) { //删除笔记本\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'DELETE'\r\n        });\r\n        const result = await response.json();\r\n        if (result.code === 200) {\r\n          alert(\"笔记本删除成功\");\r\n          this.notebooks = this.notebooks.filter(notebook => notebook.notebookId !== notebookId);\r\n          this.updateTotalPages(); // 更新总页数\r\n        } else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting notebook:', error);\r\n      }\r\n    }\r\n  },\r\n      async fetchNotebooks() {\r\n        // const token = localStorage.getItem('token');\r\n        // if (!token) {\r\n        //   alert('请先登录');\r\n        //   return;\r\n        // }\r\n  \r\n        try {\r\n          const response = await fetch('/api/notebooks', {\r\n            method: 'GET',\r\n            // headers: {\r\n            //   'Authorization': `Bearer ${token}`\r\n            // }\r\n          });\r\n  \r\n          \r\n          const data = await response.json();\r\n          if (data.code === 200) {\r\n            const notebookIds = data.data.notebookIds;\r\n            this.notebooks = await Promise.all(notebookIds.map(notebookId => this.fetchNotebookDetails(notebookId)));\r\n          } else {\r\n            alert('获取笔记本ID列表失败');\r\n          }   \r\n        } catch (error) {\r\n          console.error('Error fetching notebook IDs:', error);\r\n        }\r\n      },  \r\n      async fetchNotebookDetails(notebookId) {\r\n        // const token = localStorage.getItem('token');\r\n        try {\r\n          const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n            method: 'GET',\r\n            // headers: {\r\n            //   'Authorization': `Bearer ${token}`\r\n            // }\r\n          });\r\n  \r\n          const data = await response.json();\r\n          if (data.code === 200) {\r\n            return data.data;\r\n          }else if(data.code === 405) {\r\n            alert(`获取笔记本详细信息失败: ${data.message}`);\r\n            return null;\r\n          }else {\r\n            alert(`获取笔记本详细信息失败: ${data.message}`);\r\n            return null;\r\n          }\r\n        } catch (error) {\r\n          console.error(`Error fetching notebook details for ID ${notebookId}:`, error);\r\n          return null;\r\n        }   \r\n      } ,  \r\n      prevPage() {\r\n        if (this.currentPage > 1) {\r\n          this.currentPage--;\r\n          this.updateDisplayedNotebooks();\r\n        }\r\n      },\r\n      nextPage() {\r\n        if (this.currentPage < this.totalPages) {\r\n          this.currentPage++;\r\n          this.updateDisplayedNotebooks();\r\n        }\r\n      },\r\n      goToPage(page) {\r\n        this.currentPage = page;\r\n        this.updateDisplayedNotebooks();\r\n      },\r\n      updateDisplayedNotebooks() {\r\n        const notebooksPerPage = 4;\r\n        this.totalPages = Math.ceil(this.notebooks.length / notebooksPerPage);\r\n        this.displayedNotebooks = this.sortedNotebooks.slice((this.currentPage - 1) * notebooksPerPage, this.currentPage * notebooksPerPage);\r\n      }\r\n    },\r\n    async mounted() {\r\n      await this.fetchNotebooks();\r\n      this.updateDisplayedNotebooks();\r\n    }\r\n  };\r\n\r\n*/\r\n\r\n//假数据，测试用\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '这里填写用户名',\r\n      notebooks: [], // 存储获取的笔记本详细信息\r\n      currentPage: 1,\r\n      totalPages: 1,\r\n    };\r\n  },\r\n  computed: {\r\n    sortedNotebooks() {\r\n      return this.notebooks.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));\r\n    },\r\n    paginatedNotebooks() {\r\n      const notebooksPerPage = 4;\r\n      const startIndex = (this.currentPage - 1) * notebooksPerPage;\r\n      const endIndex = startIndex + notebooksPerPage;\r\n      return this.sortedNotebooks.slice(startIndex, endIndex);\r\n    },\r\n    totalPagesArray() {\r\n      return Array.from({ length: this.totalPages }, (v, k) => k + 1);\r\n    }\r\n  },\r\n  methods: {\r\n    goToStart() {\r\n      this.$router.push({ name: 'Start' });\r\n    },\r\n    goToNotebook() {\r\n      this.$router.push({ name: 'Notebook' });\r\n    },\r\n    goToCommunity() {\r\n      this.$router.push({ name: 'Community' });\r\n    },\r\n    goToNotebookDetails(notebook) {\r\n      const notebookPath = `/notebook/${notebook.notebookId}`;\r\n      this.$router.push({ path: notebookPath });\r\n    },\r\n    async editNotebookName(notebookId) { //修改笔记本名称\r\n    const newTitle = prompt(\"请输入新的笔记本名称：\");\r\n    if (newTitle) {\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ title: newTitle })\r\n        });\r\n        const result = await response.json();\r\n      if (result.code === 200) {\r\n        if(1){\r\n          alert(\"笔记本名称修改成功\");\r\n          this.notebooks = this.notebooks.map(notebook => \r\n            notebook.notebookId === notebookId ? { ...notebook, name: newTitle } : notebook  \r\n        );\r\n      } \r\n      else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n       }\r\n      }\r\n        catch (error) {\r\n       console.error('Error editing notebook name:', error);\r\n      }\r\n    }\r\n  },\r\n\r\n  async editNotebookSummary(notebookId) { //修改笔记本简介\r\n    const newSummary = prompt(\"请输入新的笔记本简介：\");\r\n    if (newSummary) {\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ summary: newSummary })\r\n        });\r\n        const result = await response.json();\r\n        if (result.code === 200) {\r\n          alert(\"笔记本简介修改成功\");\r\n          this.notebooks = this.notebooks.map(notebook => \r\n            notebook.notebookId === notebookId ? { ...notebook, summary: newSummary } : notebook\r\n          );\r\n        } else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error editing notebook summary:', error);\r\n      }\r\n    }\r\n  },\r\n  async deleteNotebook(notebookId) {\r\n    if (confirm(\"确定要删除这个笔记本吗？\")) { //删除笔记本\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'DELETE'\r\n        });\r\n        const result = await response.json();\r\n        if (result.code === 200) {\r\n          alert(\"笔记本删除成功\");\r\n          this.notebooks = this.notebooks.filter(notebook => notebook.notebookId !== notebookId);\r\n          this.updateTotalPages(); // 更新总页数\r\n        } else if (result.code === 501) {\r\n          alert(\"token验证失败\");\r\n        } else if (result.code === 405) {\r\n          alert(\"请求体不合法\");\r\n        } else if (result.code === 404) {\r\n          alert(\"笔记本不存在\");\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting notebook:', error);\r\n      }\r\n    }\r\n  },\r\n    async fetchNotebooks() {\r\n      try {\r\n        // 模拟延迟\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n        // 模拟获取的笔记本ID列表\r\n        const notebookIds = [1, 2, 3, 4, 5, 6];\r\n        this.notebooks = await Promise.all(notebookIds.map(notebookId => this.fetchNotebookDetails(notebookId)));\r\n        this.updateTotalPages(); // 更新总页数\r\n      } catch (error) {\r\n        console.error('Error fetching notebook IDs:', error);\r\n      }\r\n    },\r\n    async fetchNotebookDetails(notebookId) {\r\n      try {\r\n        // 模拟延迟\r\n        await new Promise(resolve => setTimeout(resolve, 200));\r\n        // 模拟获取的笔记本详细信息\r\n        const mockNotebookDetails = {\r\n          1: {notebookId: 1, name: 'Notebook 1', summary: 'This is the first notebook', lastModified: '2023-06-01T12:00:00Z' },\r\n          2: { notebookId: 2, name: 'Notebook 2', summary: 'This is the second notebook', lastModified: '2023-06-02T12:00:00Z' },\r\n          3: { notebookId: 3, name: 'Notebook 3', summary: 'This is the third notebook', lastModified: '2023-06-03T12:00:00Z' },\r\n          4: { notebookId: 4, name: 'Notebook 4', summary: 'This is the fourth notebook', lastModified: '2023-06-04T12:00:00Z' },\r\n          5: {notebookId: 5, name: 'Notebook 5', summary: 'This is the fifth notebook', lastModified: '2023-06-05T12:00:00Z' },\r\n          6: { notebookId: 6, name: 'Notebook 6', summary: 'This is the sixth notebook', lastModified: '2023-06-06T12:00:00Z' },\r\n        };\r\n        const notebookDetails = mockNotebookDetails[notebookId];\r\n        return notebookDetails;\r\n      } catch (error) {\r\n        console.error(`Error fetching notebook details for ID ${notebookId}:`, error);\r\n        return null;\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    goToPage(page) {\r\n      this.currentPage = page;\r\n    },\r\n    updateTotalPages() {\r\n      const notebooksPerPage = 4;\r\n      this.totalPages = Math.ceil(this.notebooks.length / notebooksPerPage);\r\n    },\r\n    toggleDropdown(notebookId) {\r\n      const notebook = this.notebooks.find(nb => nb.notebookId === notebookId);\r\n      notebook.showDropdown = !notebook.showDropdown;\r\n    },\r\n  },\r\n  async mounted() {\r\n    await this.fetchNotebooks();\r\n  }\r\n};\r\n\r\n\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .container {\r\n    display: flex;\r\n    height: 100vh;\r\n    overflow: hidden; /* 防止右边内容滚动 */\r\n  }\r\n  \r\n  .sidebar {\r\n    width: 16.6666%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    border-right: 1px solid #ccc;\r\n    background-color: #f5f5f5; /* 设置背景颜色为浅灰色 */\r\n    text-align: center;\r\n    padding-top: 20px; /* 添加顶部填充，使内容与顶部有间距 */\r\n}\r\n  \r\n.sidebar-item {\r\n    height: auto; /* 自动高度 */\r\n    display: flex;\r\n    flex-direction: column; /* 垂直布局 */\r\n    align-items: center; /* 居中对齐 */\r\n    justify-content: center;\r\n    padding: 20px 0; /* 添加上下填充，使每个项之间有间距 */\r\n    cursor: pointer;\r\n    color: #000; /* 设置文字颜色为黑色 */\r\n}\r\n\r\n.icon-placeholder {\r\n    width: 60px; /* 设置圆形宽度 */\r\n    height: 60px; /* 设置圆形高度 */\r\n    background-color: #87d37c; /* 设置圆形背景颜色 */\r\n    border-radius: 50%; /* 使元素为圆形 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 10px; /* 圆形与文字之间的间距 */\r\n}\r\n\r\n.sidebar-item span {\r\n    font-size: 14px; /* 设置文字大小 */\r\n}\r\n  \r\n.notebook-button {\r\n    background-color: #696969;\r\n    color: white;\r\n    border-radius: 10px;\r\n    padding: 10px 20px;\r\n}\r\n  \r\n  .main-content {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n    overflow: hidden; /* 防止内容滚动 */\r\n  }\r\n  \r\n  .notebooks {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n    gap: 20px;\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .notebook-wrapper {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .notebook {\r\n    width: 90%;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    padding: 10px;\r\n    background-color: #f0f0f0;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n    position: relative;\r\n  }\r\n  \r\n  .notebook-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .notebook-name {\r\n    flex: 1;\r\n    font-size: 1.5em;\r\n    font-weight: bold;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .separator {\r\n    width: 100%;\r\n    border: none;\r\n    border-top: 1px solid #ccc;\r\n  }\r\n  \r\n  .notebook-description {\r\n    flex: 1;\r\n    font-size: 1em;\r\n    text-align: left;\r\n    padding-left: 10px;\r\n  }\r\n  \r\n  .dropdown {\r\n    position: relative;\r\n    display: inline-block;\r\n  }\r\n  \r\n  .dropbtn {\r\n    background-color: #696969;\r\n    color: white;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n  }\r\n  \r\n  .dropdown-content {\r\n    display: block;\r\n    position: absolute;\r\n    right: 0;\r\n    background-color: #f9f9f9;\r\n    min-width: 160px;\r\n    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\r\n    z-index: 1;\r\n  }\r\n  \r\n  .dropdown-item {\r\n    padding: 12px 16px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .dropdown-item:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n  \r\n  .pagination {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .pagination button {\r\n    margin: 0 5px;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n  }\r\n  </style>\r\n  \r\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}