{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ce250968\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"sidebar-username\",\n  id: \"username\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"sidebar-item notebook-button\"\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"icon-placeholder\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"/vue图片/图片2.png\",\n  alt: \"开始图标\",\n  class: \"icon-image\"\n})]), /*#__PURE__*/_createElementVNode(\"span\", null, \"笔记本\")], -1 /* HOISTED */));\nconst _hoisted_5 = {\n  class: \"editor-section\"\n};\nconst _hoisted_6 = {\n  class: \"editor-container\"\n};\nconst _hoisted_7 = {\n  class: \"editor-header\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-tags\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = [_hoisted_8];\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-lock\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = [_hoisted_10];\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fas fa-times\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_13 = [_hoisted_12];\nconst _hoisted_14 = {\n  class: \"editor-body\"\n};\nconst _hoisted_15 = {\n  class: \"editor-footer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Toolbar = _resolveComponent(\"Toolbar\");\n  const _component_Editor = _resolveComponent(\"Editor\");\n  const _component_CreateNoteModal = _resolveComponent(\"CreateNoteModal\");\n  const _component_TagModal = _resolveComponent(\"TagModal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" 左侧侧边栏 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, _toDisplayString($data.username), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: \"sidebar-item\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goToStart && $options.goToStart(...args))\n  }, \"开始\"), _hoisted_4, _createElementVNode(\"div\", {\n    class: \"sidebar-item\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.goToCommunity && $options.goToCommunity(...args))\n  }, \"发现社区\"), _createCommentVNode(\" <div class=\\\"sidebar-item\\\" @click=\\\"goToCommunity\\\">标签管理</div> \")]), _createCommentVNode(\" 右侧笔记编辑区 \"), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.noteTitle = $event),\n    placeholder: \"编辑标题\",\n    class: \"title-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.noteTitle]]), _createElementVNode(\"button\", {\n    class: \"icon-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.tagNote && $options.tagNote(...args))\n  }, [..._hoisted_9]), _createCommentVNode(\" <button class=\\\"icon-button\\\" @click=\\\"favoriteNote\\\"><i class=\\\"fas fa-star\\\"></i></button> \"), _createElementVNode(\"button\", {\n    class: \"icon-button\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.privateNote && $options.privateNote(...args))\n  }, [..._hoisted_11]), _createElementVNode(\"button\", {\n    class: \"icon-button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.closeEditor && $options.closeEditor(...args))\n  }, [..._hoisted_13])]), _createElementVNode(\"div\", _hoisted_14, [_createVNode(_component_Toolbar, {\n    editor: $data.editorRef,\n    defaultConfig: $data.toolbarConfig,\n    mode: _ctx.mode\n  }, null, 8 /* PROPS */, [\"editor\", \"defaultConfig\", \"mode\"]), _createVNode(_component_Editor, {\n    defaultConfig: $data.editorConfig,\n    mode: _ctx.mode,\n    modelValue: $data.valueHtml,\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.valueHtml = $event),\n    class: \"quill-editor\",\n    onOnCreated: $options.handleCreated,\n    onOnChange: $options.handleChange,\n    onOnDestroyed: $options.handleDestroyed,\n    onOnFocus: $options.handleFocus,\n    onOnBlur: $options.handleBlur,\n    onCustomAlert: $options.customAlert,\n    onCustomPaste: $options.customPaste\n  }, null, 8 /* PROPS */, [\"defaultConfig\", \"mode\", \"modelValue\", \"onOnCreated\", \"onOnChange\", \"onOnDestroyed\", \"onOnFocus\", \"onOnBlur\", \"onCustomAlert\", \"onCustomPaste\"])]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.saveNote && $options.saveNote(...args)),\n    class: \"save-button\"\n  }, \"保存\"), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.insertText && $options.insertText(...args))\n  }, \"插入文本\"), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.printHtml && $options.printHtml(...args))\n  }, \"打印 HTML\"), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.disable && $options.disable(...args))\n  }, \"禁用\")])])]), _createCommentVNode(\" 包含模态框组件 \"), _createVNode(_component_CreateNoteModal, {\n    visible: $data.isCreateNoteModalVisible,\n    onClose: $options.hideCreateNoteModal\n  }, null, 8 /* PROPS */, [\"visible\", \"onClose\"])]), _createVNode(_component_TagModal, {\n    visible: $data.isTagModalVisible,\n    tags: $data.selectedNote ? $data.selectedNote.tags : [],\n    onClose: $options.closeTagModal,\n    onUpdateTags: $options.updateTags\n  }, null, 8 /* PROPS */, [\"visible\", \"tags\", \"onClose\", \"onUpdateTags\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","id","_createElementVNode","src","alt","_hoisted_8","_hoisted_10","_hoisted_12","_createElementBlock","_Fragment","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_toDisplayString","$data","username","onClick","_cache","args","$options","goToStart","_hoisted_4","goToCommunity","_hoisted_5","_hoisted_6","_hoisted_7","type","$event","noteTitle","placeholder","tagNote","_hoisted_9","privateNote","_hoisted_11","closeEditor","_hoisted_13","_hoisted_14","_createVNode","_component_Toolbar","editor","editorRef","defaultConfig","toolbarConfig","mode","_ctx","_component_Editor","editorConfig","modelValue","valueHtml","onOnCreated","handleCreated","onOnChange","handleChange","onOnDestroyed","handleDestroyed","onOnFocus","handleFocus","onOnBlur","handleBlur","onCustomAlert","customAlert","onCustomPaste","customPaste","_hoisted_15","saveNote","insertText","printHtml","disable","_component_CreateNoteModal","visible","isCreateNoteModalVisible","onClose","hideCreateNoteModal","_component_TagModal","isTagModalVisible","tags","selectedNote","closeTagModal","onUpdateTags","updateTags"],"sources":["D:\\VUEitem\\front\\src\\components\\NoteEdit.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <!-- 左侧侧边栏 -->\r\n      <div class=\"sidebar\">\r\n        <div class=\"sidebar-username\" id=\"username\">{{ username }}</div>\r\n        <div class=\"sidebar-item\" @click=\"goToStart\">开始</div>\r\n        <div class=\"sidebar-item notebook-button\">\r\n        <div class=\"icon-placeholder\"><img src=\"/vue图片/图片2.png\" alt=\"开始图标\" class=\"icon-image\"></div>\r\n        <span>笔记本</span>\r\n      </div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">发现社区</div>\r\n        <!-- <div class=\"sidebar-item\" @click=\"goToCommunity\">标签管理</div> -->\r\n      </div>\r\n      \r\n       \r\n      <!-- 右侧笔记编辑区 -->\r\n      <div class=\"editor-section\">\r\n        <div class=\"editor-container\">\r\n          <div class=\"editor-header\">\r\n            <input type=\"text\" v-model=\"noteTitle\" placeholder=\"编辑标题\" class=\"title-input\"/>\r\n            <button class=\"icon-button\" @click=\"tagNote\"><i class=\"fas fa-tags\"></i></button>\r\n            <!-- <button class=\"icon-button\" @click=\"favoriteNote\"><i class=\"fas fa-star\"></i></button> -->\r\n            <button class=\"icon-button\" @click=\"privateNote\"><i class=\"fas fa-lock\"></i></button>\r\n            <button class=\"icon-button\" @click=\"closeEditor\"><i class=\"fas fa-times\"></i></button>\r\n          </div>\r\n\r\n       \r\n          <div class=\"editor-body\">\r\n            <Toolbar :editor=\"editorRef\" :defaultConfig=\"toolbarConfig\" :mode=\"mode\" />\r\n            <Editor\r\n              :defaultConfig=\"editorConfig\"\r\n              :mode=\"mode\"\r\n              v-model=\"valueHtml\"\r\n              class=\"quill-editor\"\r\n              @onCreated=\"handleCreated\"\r\n              @onChange=\"handleChange\"\r\n              @onDestroyed=\"handleDestroyed\"\r\n              @onFocus=\"handleFocus\"\r\n              @onBlur=\"handleBlur\"\r\n              @customAlert=\"customAlert\"\r\n              @customPaste=\"customPaste\"\r\n            />\r\n          </div>\r\n          <div class=\"editor-footer\">\r\n            <button @click=\"saveNote\" class=\"save-button\">保存</button>\r\n            <button @click=\"insertText\">插入文本</button>\r\n            <button @click=\"printHtml\">打印 HTML</button>\r\n            <button @click=\"disable\">禁用</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- 包含模态框组件 -->\r\n      <CreateNoteModal :visible=\"isCreateNoteModalVisible\" @close=\"hideCreateNoteModal\" />\r\n    </div>\r\n    <TagModal \r\n    :visible=\"isTagModalVisible\" \r\n    :tags=\"selectedNote ? selectedNote.tags : []\"\r\n    @close=\"closeTagModal\"\r\n    @update-tags=\"updateTags\"\r\n  />\r\n</template>\r\n  \r\n  <script>\r\n  import TagModal from './TagModal.vue';\r\n\r\n  import '@wangeditor/editor/dist/css/style.css';\r\n  import { onBeforeUnmount, ref, shallowRef, onMounted } from 'vue';\r\n  import { Editor, Toolbar } from '@wangeditor/editor-for-vue';\r\n  import CreateNoteModal from './CreateNoteModal.vue';\r\n  \r\n  export default {\r\n  components: { Editor, Toolbar, CreateNoteModal,TagModal,\r\n  },\r\n  computed: {\r\n  tagsForModal() {\r\n    console.log('Tags for modal:', this.selectedNote ? this.selectedNote.tags : []);\r\n    return this.selectedNote ? this.selectedNote.tags : [];\r\n  },\r\n  notebookId() {\r\n    return this.$route.params.notebookId;\r\n  },\r\n  noteContent(){\r\n    return this.$route.params.noteContent;\r\n  }\r\n},\r\n  props: {\r\n    id: Number,\r\n    noteName: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      username: '测试用户',\r\n      // 笔记相关数据\r\n      notes: [{ noteId: '1', title: '笔记1', content: '笔记1的内容', tags: ['工作', '会议'] },\r\n        { noteId: '2', title: '笔记2', content: '笔记2的内容', tags: ['学习', '编程'] },\r\n        { noteId: '3', title: '笔记3', content: '笔记3的内容', tags: ['生活', '购物'] },\r\n        { noteId: '4', title: '笔记4', content: '笔记4的内容', tags: ['旅行', '摄影'] },\r\n        \r\n        { noteId: '5', title: '笔记5', content: '笔记5的内容', tags: ['美食', '烹饪'] },\r\n        { noteId: '6', title: '笔记6', content: '笔记6的内容', tags: ['健康', '运动'] },\r\n      ],\r\n      selectedNote: null,\r\n      hasMoreNotes: false,\r\n      searchQuery: '',\r\n      notebookSummary: '这里是简介',\r\n      notebookName: '这里是笔记本名',\r\n      isCreateNoteModalVisible: false,\r\n      noteTitle: this.$route.params.noteName || '', // 设置默认值\r\n      isTagModalVisible: false,\r\n      // isFavorite: false,\r\n      isPrivate: false,\r\n      \r\n      \r\n      // 编辑器相关数据\r\n      editorRef: shallowRef(null),\r\n      valueHtml: ref('<p>hello</p>'),\r\n      toolbarConfig: {\r\n        excludeKeys: [\"insertVideo\", \"uploadVideo\", \"fullScreen\"],\r\n      },\r\n      editorConfig: { MENU_CONF: {} },\r\n    };\r\n  },\r\n  methods: {\r\n    selectNote(note) {\r\n      this.selectedNote = note;\r\n      this.$router.push({ name: 'NoteEdit', params: { notebookId: this.notebookId, noteId: note.noteId } });\r\n    },\r\n    async fetchNoteDetails(noteId) {\r\n  try {\r\n    const response = await fetch(`/api/notes/${noteId}`, {\r\n      method: 'GET',\r\n    });\r\n\r\n    const data = await response.json();\r\n    if (data.code === 200) {\r\n      this.noteContent = data.data.content;\r\n      this.isFavorite = data.data.isFavorite;\r\n      this.isPrivate = data.data.isPrivate;\r\n      this.selectedNote = {\r\n        ...this.selectedNote,\r\n        tags: data.data.tags,\r\n      };\r\n    } else if (data.code === 404) {\r\n      alert('资源不存在');\r\n    } else if (data.code === 501) {\r\n      alert('Token 验证失败');\r\n    } else if (data.code === 405) {\r\n      alert('不合法的请求');\r\n    } else {\r\n      alert(`获取笔记详细信息失败: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching note details for ID ${noteId}:`, error);\r\n  }\r\n},\r\n    async mounted() {\r\n      const noteId = this.$route.params.noteId;\r\n      if (noteId) {\r\n        await this.fetchNoteDetails(noteId);\r\n      }\r\n    },\r\n    tagNote() {\r\n  if (this.selectedNote) {\r\n    this.isTagModalVisible = true;\r\n  } else {\r\n    alert('请先选择一个笔记');\r\n  }\r\n},\r\nasync favoriteNote() {\r\n    try {\r\n      const response = await fetch(`/api/notes/${this.selectedNote.noteId}/favorite`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.code === 200) {\r\n        this.isFavorite = !this.isFavorite;\r\n        alert(this.isFavorite ? '笔记已收藏' : '笔记已取消收藏');\r\n        if (this.isFavorite) {\r\n          this.favoriteNotes.push(this.selectedNote);\r\n        } else {\r\n          this.favoriteNotes = this.favoriteNotes.filter(note => note.noteId !== this.selectedNote.noteId);\r\n        }\r\n      } else {\r\n        alert(`操作失败: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling favorite:', error);\r\n      alert('操作失败');\r\n    }\r\n  },\r\n  async privateNote() {\r\n    try {\r\n      const response = await fetch(`/api/notes/${this.selectedNote.noteId}/private`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.code === 200) {\r\n        this.isPrivate = !this.isPrivate;\r\n        alert(this.isPrivate ? '笔记已设为私密' : '笔记已设为公开');\r\n        if (this.isPrivate) {\r\n          this.privateNotes.push(this.selectedNote);\r\n        } else {\r\n          this.privateNotes = this.privateNotes.filter(note => note.noteId !== this.selectedNote.noteId);\r\n        }\r\n      } else {\r\n        alert(`操作失败: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling private:', error);\r\n      alert('操作失败');``\r\n    }\r\n  },\r\n   // 新增方法用于关闭标签模态框\r\n   closeTagModal() {\r\n    this.isTagModalVisible = false;\r\n  },\r\n\r\n  updateTags(newTags) {\r\n      if (this.selectedNote) {\r\n        this.selectedNote.tags = newTags;\r\n      }\r\n    },\r\n  // 新增方法用于添加标签\r\n  async addTag(tag) {\r\n    try {\r\n      const response = await fetch(`/api/notes/${this.selectedNote.noteId}/tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ tag }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.code === 200) {\r\n        this.selectedNote.tags.push(tag);\r\n        alert('标签添加成功');\r\n      } else {\r\n        alert(`添加标签失败: ${data.message}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error adding tag:', error);\r\n      alert('添加标签失败');\r\n    }\r\n  },\r\n    prevPage() {\r\n      // 实现上一页功能\r\n    },\r\n    nextPage() {\r\n      // 实现下一页功能\r\n    },\r\n    showCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = true;\r\n    },\r\n    hideCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = false;\r\n    },\r\n    clearSearch() {\r\n      this.searchQuery = '';\r\n    },\r\n    searchNotes() {\r\n      // 实现搜索功能\r\n    },\r\n    goToStart() {\r\n      this.$router.push({ name: 'Start' });\r\n    },\r\n    goToCommunity() {\r\n      this.$router.push({ name: 'Community' });\r\n    },\r\n    backToStart() {\r\n      this.$router.push({ name: 'Start' });\r\n    },\r\n    backToNotebook() {\r\n      this.$router.push({ name: 'Notebook' });\r\n    },\r\n    async fetchNotebookDetails(notebookId) {\r\n      try {\r\n        const response = await fetch(`/api/notebooks/${notebookId}`, {\r\n          method: 'GET',\r\n        });\r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          this.notebookSummary = data.summary;\r\n          this.notebookName = data.name;\r\n          return data.data;\r\n        } else {\r\n          alert(`获取笔记本详细信息失败: ${data.message}`);\r\n          return null;\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error fetching notebook details for ID ${notebookId}:`, error);\r\n        return null;\r\n      }\r\n    },\r\n    async mounted() {\r\n      await this.fetchNotebookDetails();\r\n    },\r\n    handleCreated(editor) {\r\n      console.log('created', editor);\r\n      this.editorRef = editor;\r\n    },\r\n    handleChange(editor) {\r\n      console.log('change:', editor.getHtml());\r\n    },\r\n    handleDestroyed(editor) {\r\n      console.log('destroyed', editor);\r\n    },\r\n    handleFocus(editor) {\r\n      console.log('focus', editor);\r\n    },\r\n    handleBlur(editor) {\r\n      console.log('blur', editor);\r\n    },\r\n    customAlert(info, type) {\r\n      alert(`【自定义提示】${type} - ${info}`);\r\n    },\r\n    customPaste(editor, event, callback) {\r\n      console.log('ClipboardEvent 粘贴事件对象', event);\r\n      editor.insertText('');\r\n      callback(true);\r\n    },\r\n    insertText() {\r\n      if (this.editorRef) {\r\n        this.editorRef.insertText('hello world');\r\n      }\r\n    },\r\n    printHtml() {\r\n      if (this.editorRef) {\r\n        console.log(this.editorRef.getHtml());\r\n      }\r\n    },\r\n    disable() {\r\n      if (this.editorRef) {\r\n        this.editorRef.disable();\r\n      }\r\n    },\r\n\r\n    //添加笔记，POST请求\r\n    // 更新笔记，PUT请求\r\nasync saveNote() {\r\n  if (!this.selectedNote) {\r\n    alert('没有选中任何笔记');\r\n    return;\r\n  }\r\n\r\n  const noteId = this.selectedNote.noteId; // 从选中的笔记中获取ID\r\n  const title = this.noteTitle; // 从输入框获取标题\r\n  const content = this.valueHtml; // 从编辑器获取内容\r\n  const tags = this.selectedNote.tags || []; // 假设标签可以从编辑界面某处获取\r\n\r\n  const payload = {\r\n    title,\r\n    content,\r\n    tags\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`/api/notes/${noteId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    switch (data.code) {\r\n      case 200:\r\n        alert('笔记更新成功');\r\n        this.$router.push({ name: 'NoteDetail', params: { id: noteId } }); // 假设有一个笔记详情路由\r\n        break;\r\n      case 501:\r\n        alert('token 验证失败');\r\n        break;\r\n      case 405:\r\n        alert('不合法的请求');\r\n        break;\r\n      case 404:\r\n        alert('笔记不存在');\r\n        break;\r\n      default:\r\n        alert(`更新笔记失败: ${data.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating note:', error);\r\n    alert('更新笔记时出现错误');\r\n  }\r\n},\r\n\r\n    closeEditor() {\r\n      this.$router.push({ name: 'NoteDetail' });\r\n    },\r\n  },\r\n  async mounted() {\r\n    await this.fetchNotebookDetails();\r\n  },\r\n  watch: {\r\n    '$route.params.noteId': 'fetchNoteDetail'\r\n  }\r\n};\r\n\r\n  </script>\r\n  \r\n\r\n\r\n  <style scoped>\r\n\r\n\r\n\r\n  .container {\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 100%;\r\n  }\r\n  \r\n  /* 左侧侧边栏样式 */\r\n  .sidebar {\r\n    width: 200px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    border-right: 1px solid #e0e0e0;\r\n    background-color: #ffffff;\r\n    text-align: center;\r\n    padding-top: 20px;\r\n    box-shadow: 2px 0 5px rgba(0,0,0,0.1);\r\n  }\r\n\r\n  .sidebar-item {\r\n    height: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 15px 0;\r\n    cursor: pointer;\r\n    color: #333;\r\n    transition: background-color 0.3s;\r\n  }\r\n\r\n  .sidebar-item:hover {\r\n    background-color: #f0f0f0;\r\n  }\r\n    \r\n  .sidebar-username {\r\n    height: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 15px 0;\r\n    font-weight: bold;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .notebook-button {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    border-radius: 20px;\r\n    padding: 10px 20px;\r\n    margin: 10px 20px;\r\n    transition: background-color 0.3s;\r\n  }\r\n\r\n  .notebook-button:hover {\r\n    background-color: #45a049;\r\n  }\r\n\r\n  \r\n  .note-count-container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .note-count {\r\n    flex: 1;\r\n    text-align: center;\r\n  }\r\n  \r\n  .add-note {\r\n    cursor: pointer;\r\n    font-size: 1.2em;\r\n    color: #000000; /* 可根据需要修改颜色 */\r\n  }\r\n  \r\n  .icon {\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: #b0b0b0;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .icon-placeholder {\r\n    width: 60px; /* 设置圆形宽度 */\r\n    height: 60px; /* 设置圆形高度 */\r\n    background-color: #87d37c; /* 设置圆形背景颜色 */\r\n    border-radius: 50%; /* 使元素为圆形 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 10px; /* 圆形与文字之间的间距 */\r\n} \r\n\r\n\r\n  .icon-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover; /* 确保图片填满圆形且不变形 */\r\n}\r\n\r\n\r\n  .sidebar-button {\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n    width: 100%;\r\n    background-color: #d0d0d0;\r\n    border: none;\r\n    text-align: center;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .sidebar-button:hover {\r\n    background-color: #c0c0c0;\r\n  }\r\n  \r\n  /* 中间笔记本内容区样式 */\r\n .middle-section {\r\n  width: 200px; /* 具体宽度 */\r\n  background-color: #f0f0f0;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-right: 1px solid #000000;\r\n}\r\n  \r\n  .notebook-header {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .search-container {\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    border: 1px solid #ccc;\r\n    padding: 5px;\r\n    background-color: #fff;\r\n  }\r\n  \r\n  .search-container input {\r\n    border: none;\r\n    outline: none;\r\n    flex-grow: 1;\r\n    padding-left: 25px; /* 为左侧图标留出空间 */\r\n    padding-right: 2px; /* 为右侧图标留出空间 */\r\n  }\r\n  \r\n  .search-icon {\r\n    position: absolute;\r\n    left: 10px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .clear-icon {\r\n    position: absolute;\r\n    right: 10px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .action-button {\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n    background-color: #d0d0d0;\r\n    border: none;\r\n    text-align: center;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .action-button:hover {\r\n    background-color: #c0c0c0;\r\n  }\r\n  \r\n  .notebook-list {\r\n    flex-grow: 1;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .note-item {\r\n    padding: 30px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .note-item.selected {\r\n    background-color: #a0e0a0;\r\n  }\r\n  \r\n  .pagination {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n    /* 右侧笔记编辑区样式 */\r\n    .editor-section {\r\n    flex-grow: 1; /* 确保右侧编辑区占据剩余空间 */\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .editor-container {\r\n    max-width: 800px;\r\n    margin: 0 auto;\r\n    flex-grow: 1;\r\n    padding: 20px;\r\n    background: #fff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n  }\r\n\r\n\r\n \r\n  \r\n  .editor-header {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n    padding-bottom: 10px;\r\n  }\r\n  \r\n  .title-input {\r\n    flex-grow: 1;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .icon-button {\r\n    background: none;\r\n    border: none;\r\n    cursor: pointer;\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .editor-body {\r\n    flex-grow: 1; /* 让编辑器主体部分占据剩余空间 */\r\n    overflow-y: auto; /* 防止内容过多时溢出 */\r\n  }\r\n  \r\n  .editor-toolbar {\r\n    border-bottom: 1px solid #ccc;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .quill-editor {\r\n    height: 400px;\r\n  }\r\n  \r\n  .editor-footer {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .save-button {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    padding: 10px 20px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .save-button:hover {\r\n    background-color: #45a049;\r\n  }\r\n\r\n  .tag-modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.tag-modal-content {\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  max-width: 500px;\r\n  width: 90%;\r\n}\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}