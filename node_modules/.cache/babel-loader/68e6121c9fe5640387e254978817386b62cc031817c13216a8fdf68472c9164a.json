{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CreateNoteModal from './CreateNoteModal.vue';\nexport default {\n  components: {\n    CreateNoteModal\n  },\n  data() {\n    return {\n      username: '测试用户',\n      isModalVisible: false,\n      isCreateNoteModalVisible: false,\n      newNotebookName: '',\n      newNotebookDescription: '',\n      notes: [{\n        noteId: '1',\n        name: '工作计划',\n        lastModified: '2024-07-07T08:30:00Z',\n        content: '这是工作计划的内容...',\n        tags: ['工作', '会议']\n      }, {\n        noteId: '2',\n        name: '学习笔记',\n        lastModified: '2024-07-06T15:45:00Z',\n        content: '这是学习笔记的...',\n        tags: ['学习', '编程']\n      }, {\n        noteId: '3',\n        name: '日记',\n        lastModified: '2024-07-05T22:10:00Z',\n        content: '这是日记的内容...',\n        tags: ['生活', '购物']\n      }, {\n        noteId: '4',\n        name: '项目ideas',\n        lastModified: '2024-07-04T11:20:00Z',\n        content: '这是项目ideas的内容...',\n        tags: ['旅行', '摄影']\n      }, {\n        noteId: '5',\n        name: '购物清单',\n        lastModified: '2024-07-03T09:00:00Z',\n        content: '这是购物清单的内容...',\n        tags: ['美食', '烹饪']\n      }],\n      //存储笔记列表\n      searchKeyword: '',\n      //搜索关键字\n      filteredNotes: [],\n      //符合的笔记\n      searchInput: '',\n      searchMode: 'keyword' // 'keyword' 或 'tag'\n    };\n  },\n  methods: {\n    goToStart() {\n      this.$router.push({\n        name: 'Start'\n      });\n    },\n    goToNotebook() {\n      this.$router.push({\n        name: 'Notebook'\n      }); // 这里需要在路由中添加对应路径\n    },\n    goToCommunity() {\n      this.$router.push({\n        name: 'Community'\n      }); // 这里需要在路由中添加对应路径\n    },\n    // goToFavorites() {\n    // this.$router.push({ name: 'FavoriteNotes' });\n    // },\n    goToPrivate() {\n      this.$router.push({\n        name: 'PrivateNotes'\n      });\n    },\n    search() {\n      // 处理搜索逻辑\n      // if (!this.searchKeyword.trim()) {\n      //   this.filteredNotes = this.notes;\n      //   return;\n      // }\n\n      const keyword = this.searchKeyword.toLowerCase().trim();\n      if (!keyword) {\n        this.filteredNotes = this.notes;\n        return;\n      }\n      this.filteredNotes = this.notes.filter(note => note.name.toLowerCase().includes(keyword) || note.content.toLowerCase().includes(keyword));\n    },\n    showCreateNoteModal() {\n      this.isCreateNoteModalVisible = true;\n    },\n    hideCreateNoteModal() {\n      this.isCreateNoteModalVisible = false;\n    },\n    showNewNotebookModal() {\n      this.isModalVisible = true;\n    },\n    hideNewNotebookModal() {\n      this.isModalVisible = false;\n    },\n    async createNotebook() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('请先登录');\n        return;\n      }\n      const response = await fetch('/api/notebooks/createNotebooks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: this.newNotebookName,\n          summary: this.newNotebookDescription\n        })\n      });\n      const data = await response.json();\n      if (data.code === 200) {\n        alert('笔记本创建成功');\n        this.hideNewNotebookModal();\n        // 处理笔记本创建成功后的逻辑\n      } else if (data.code === 501) {\n        alert('token验证失败');\n      } else {\n        alert('创建笔记本失败');\n      }\n    },\n    /*模拟时不需要*/\n    // async search() {\n    //   if (!this.searchKeyword.trim()) {\n    //     this.fetchNotes(); // 如果搜索框为空,获取所有笔记\n    //     return;\n    //   }\n\n    //   const token = localStorage.getItem('token');\n    //   if (!token) {\n    //     alert('请先登录');\n    //     return;\n    //   }\n\n    //   try {\n    //     const response = await fetch(`/api/notes?keyword=${encodeURIComponent(this.searchKeyword)}`, {\n    //       method: 'GET',\n    //       headers: {\n    //         'Authorization': `Bearer ${token}`\n    //       }\n    //     });\n\n    //     const data = await response.json();\n    //     if (data.code === 200) {\n    //       this.filteredNotes = data.data;\n    //     } else if (data.code === 501) {\n    //       alert('token验证失败');\n    //     } else if (data.code === 407) {\n    //       alert('没有找到匹配的笔记');\n    //       this.filteredNotes = [];\n    //     } else {\n    //       alert('搜索失败');\n    //     }\n    //   } catch (error) {\n    //     console.error('搜索笔记时出错:', error);\n    //     alert('搜索失败');\n    //   }\n    // },\n\n    // async fetchNotes() {\n    // const token = localStorage.getItem('token');\n    // if (!token) {\n    //   alert('请先登录');\n    //   return;\n    // }\n\n    // try {\n    //   // 获取所有笔记ID\n    //   const response = await fetch('/api/notes', {\n    //     method: 'GET',\n    //     headers: {\n    //       'Authorization': `Bearer ${token}`\n    //     }\n    //   });\n\n    //   const data = await response.json();\n    //   if (data.code === 200) {\n    //     // 获取每个笔记的详细信息\n    //     const notePromises = data.data.noteId.map(id => this.fetchNoteDetails(id));\n    //     this.notes = await Promise.all(notePromises);\n    //   } else if (data.code === 501) {\n    //     alert('token验证失败');\n    //   } else {\n    //     alert('获取笔记列表失败');\n    //   }\n    // } catch (error) {\n    //   console.error('获取笔记列表时出错:', error);\n    //   alert('获取笔记列表失败');\n    // }\n    // },\n\n    // async fetchNoteDetails(noteId) {\n    //   const token = localStorage.getItem('token');\n    //   const response = await fetch(`/api/${noteId}`, {\n    //     method: 'GET',\n    //     headers: {\n    //       'Authorization': `Bearer ${token}`\n    //     }\n    //   });\n\n    //   const data = await response.json();\n    //   if (data.code === 200) {\n    //     return data.data;\n    //   } else {\n    //     console.error(`获取笔记 ${noteId} 详情失败`);\n    //     return null;\n    //   }\n    // },\n\n    // formatDate(dateString) {\n    // const date = new Date(dateString);\n    // return date.toLocaleString(); // 格式化日期\n    // }\n\n    formatDate(dateString) {\n      //模拟formatDate\n      const date = new Date(dateString);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n  watch: {\n    searchKeyword() {\n      this.keywordSearch();\n    }\n  },\n  //模拟时不需要\n  mounted() {\n    // this.fetchNotes(); // 组件挂载时获取笔记列表\n    this.filteredNotes = this.notes;\n  }\n};","map":{"version":3,"names":["CreateNoteModal","components","data","username","isModalVisible","isCreateNoteModalVisible","newNotebookName","newNotebookDescription","notes","noteId","name","lastModified","content","tags","searchKeyword","filteredNotes","searchInput","searchMode","methods","goToStart","$router","push","goToNotebook","goToCommunity","goToPrivate","search","keyword","toLowerCase","trim","filter","note","includes","showCreateNoteModal","hideCreateNoteModal","showNewNotebookModal","hideNewNotebookModal","createNotebook","token","localStorage","getItem","alert","response","fetch","method","headers","body","JSON","stringify","summary","json","code","formatDate","dateString","date","Date","toLocaleString","year","month","day","hour","minute","watch","keywordSearch","mounted"],"sources":["D:\\VUEitem\\front\\src\\components\\Start.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <div class=\"sidebar\">\r\n        <div class=\"sidebar-username\" id=\"username\">{{ username }}</div>\r\n        <div class=\"sidebar-item start-button\" @click=\"goToStart\">\r\n          <div class=\"icon-placeholder\"><img src=\"/vue图片/图片1.png\" alt=\"开始图标\" class=\"icon-image\"></div>\r\n          <span>开始</span>\r\n        </div>\r\n        <div class=\"sidebar-item\" @click=\"goToNotebook\">笔记本</div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">发现社区</div>\r\n        <!-- <div class=\"sidebar-item\" @click=\"goToCommunity\">标签管理</div> -->\r\n      </div>\r\n      <div class=\"main-content\">\r\n        <div class=\"top-content\">\r\n          <div class=\"top-left\">\r\n            <div class=\"button-container\">\r\n              <div class=\"button\">新建笔记</div>\r\n              <div class=\"dropdown\">\r\n                <div class=\"dropdown-item\" @click=\"showCreateNoteModal\">新建日常笔记</div>\r\n                <div class=\"dropdown-item\">SWOT模板思维笔记 @click=\"\"</div>\r\n                <div class=\"dropdown-item\">5W1H模板思维笔记</div>\r\n                <div class=\"dropdown-item\">时间管理四象限模板思维笔记</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"top-right\">\r\n            <div class=\"button\" @click=\"showNewNotebookModal\">新建笔记本</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"search-bar\">\r\n          <input type=\"text\" v-model=\"searchInput\" :placeholder=\"searchMode === 'keyword' ? '关键字搜索' : '标签搜索'\">\r\n          <div class=\"search-button\" @click=\"search\"></div>\r\n          <div class=\"toggle-button\" @click=\"toggleSearchMode\">\r\n            {{ searchMode === 'keyword' ? '切换到标签搜索' : '切换到关键字搜索' }}\r\n          </div>\r\n        </div>\r\n        <div class=\"bottom-content\">\r\n          <div class=\"note-list\">\r\n            <div v-for=\"note in filteredNotes\" :key=\"note.noteId\" class=\"note-item\">\r\n              <h3>{{ note.name }}</h3>\r\n              <p>最后修改日期: {{ formatDate(note.lastModified) }}</p>\r\n              <p>标签：\r\n                <span v-for=\"(tag, index) in note.tags\" :key=\"index\" class=\"tag\">\r\n                {{ tag }}{{ index < note.tags.length - 1 ? ', ' : '' }}\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"side-buttons\">\r\n        <div class=\"side-button\">查看收藏列表</div>\r\n        <div class=\"side-button\">查看私密列表</div>\r\n      </div>\r\n  \r\n      <!-- 新建笔记本的模态框 -->\r\n      <div class=\"modal\" v-if=\"isModalVisible\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h2>新建笔记本</h2>\r\n            <span class=\"close\" @click=\"hideNewNotebookModal\">&times;</span>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <h3>基本信息</h3>\r\n            <div>\r\n              <label>笔记本名称:</label>\r\n              <input type=\"text\" v-model=\"newNotebookName\">\r\n            </div>\r\n            <div>\r\n              <label>简介:</label>\r\n              <textarea v-model=\"newNotebookDescription\"></textarea>\r\n            </div>\r\n            <div class=\"modal-actions\">\r\n              <button @click=\"createNotebook\">创建</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 包含模态框组件 -->\r\n      <CreateNoteModal :visible=\"isCreateNoteModalVisible\" @close=\"hideCreateNoteModal\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import CreateNoteModal from './CreateNoteModal.vue';\r\n  export default {\r\n    components: {\r\n    CreateNoteModal,\r\n  },\r\n  data() {\r\n      return {\r\n        username: '测试用户', \r\n        isModalVisible: false,\r\n        isCreateNoteModalVisible: false,\r\n        newNotebookName: '',\r\n        newNotebookDescription: '',\r\n        notes:[\r\n        {\r\n          noteId: '1',\r\n          name: '工作计划',\r\n          lastModified: '2024-07-07T08:30:00Z',\r\n          content: '这是工作计划的内容...',\r\n          tags: ['工作', '会议']\r\n        },\r\n        {\r\n          noteId: '2',\r\n          name: '学习笔记',\r\n          lastModified: '2024-07-06T15:45:00Z',\r\n          content: '这是学习笔记的...',\r\n          tags: ['学习', '编程']\r\n        },\r\n        {\r\n          noteId: '3',\r\n          name: '日记',\r\n          lastModified: '2024-07-05T22:10:00Z',\r\n          content: '这是日记的内容...',\r\n          tags: ['生活', '购物']\r\n        },\r\n        {\r\n          noteId: '4',\r\n          name: '项目ideas',\r\n          lastModified: '2024-07-04T11:20:00Z',\r\n          content: '这是项目ideas的内容...',\r\n          tags: ['旅行', '摄影']\r\n        },\r\n        {\r\n          noteId: '5',\r\n          name: '购物清单',\r\n          lastModified: '2024-07-03T09:00:00Z',\r\n          content: '这是购物清单的内容...',\r\n          tags: ['美食', '烹饪']\r\n        }\r\n        ], //存储笔记列表\r\n        searchKeyword: '',  //搜索关键字\r\n        filteredNotes: [],  //符合的笔记\r\n        searchInput:'',\r\n        searchMode: 'keyword', // 'keyword' 或 'tag'\r\n      };\r\n    },\r\n    methods: {\r\n      goToStart() {\r\n        this.$router.push({ name: 'Start' });\r\n      },\r\n      goToNotebook() {\r\n        this.$router.push({ name: 'Notebook' }); // 这里需要在路由中添加对应路径\r\n      },\r\n      goToCommunity() {\r\n        this.$router.push({ name: 'Community' }); // 这里需要在路由中添加对应路径\r\n      },\r\n      // goToFavorites() {\r\n      // this.$router.push({ name: 'FavoriteNotes' });\r\n      // },\r\n      goToPrivate() {\r\n        this.$router.push({ name: 'PrivateNotes' });\r\n      },\r\n      \r\n\r\n      search() {\r\n        // 处理搜索逻辑\r\n        // if (!this.searchKeyword.trim()) {\r\n        //   this.filteredNotes = this.notes;\r\n        //   return;\r\n        // }\r\n\r\n        const keyword = this.searchKeyword.toLowerCase().trim();\r\n\r\n        if (!keyword) {\r\n          this.filteredNotes = this.notes;\r\n          return;\r\n        }\r\n\r\n        this.filteredNotes = this.notes.filter(note => \r\n          note.name.toLowerCase().includes(keyword) || \r\n          note.content.toLowerCase().includes(keyword)\r\n        );\r\n      },\r\n      showCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = true;\r\n    },\r\n    hideCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = false;\r\n    },\r\n      showNewNotebookModal() {\r\n        this.isModalVisible = true;\r\n      },\r\n      hideNewNotebookModal() {\r\n        this.isModalVisible = false;\r\n      },\r\n      async createNotebook() {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          alert('请先登录');\r\n          return;\r\n        }\r\n  \r\n        const response = await fetch('/api/notebooks/createNotebooks', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n          },\r\n          body: JSON.stringify({\r\n            name: this.newNotebookName,\r\n            summary: this.newNotebookDescription,\r\n          })\r\n        });\r\n  \r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          alert('笔记本创建成功');\r\n          this.hideNewNotebookModal();\r\n          // 处理笔记本创建成功后的逻辑\r\n        } else if (data.code === 501) {\r\n          alert('token验证失败');\r\n        } else {\r\n          alert('创建笔记本失败');\r\n        }\r\n      },\r\n\r\n/*模拟时不需要*/ \r\n      // async search() {\r\n      //   if (!this.searchKeyword.trim()) {\r\n      //     this.fetchNotes(); // 如果搜索框为空,获取所有笔记\r\n      //     return;\r\n      //   }\r\n\r\n      //   const token = localStorage.getItem('token');\r\n      //   if (!token) {\r\n      //     alert('请先登录');\r\n      //     return;\r\n      //   }\r\n\r\n      //   try {\r\n      //     const response = await fetch(`/api/notes?keyword=${encodeURIComponent(this.searchKeyword)}`, {\r\n      //       method: 'GET',\r\n      //       headers: {\r\n      //         'Authorization': `Bearer ${token}`\r\n      //       }\r\n      //     });\r\n\r\n      //     const data = await response.json();\r\n      //     if (data.code === 200) {\r\n      //       this.filteredNotes = data.data;\r\n      //     } else if (data.code === 501) {\r\n      //       alert('token验证失败');\r\n      //     } else if (data.code === 407) {\r\n      //       alert('没有找到匹配的笔记');\r\n      //       this.filteredNotes = [];\r\n      //     } else {\r\n      //       alert('搜索失败');\r\n      //     }\r\n      //   } catch (error) {\r\n      //     console.error('搜索笔记时出错:', error);\r\n      //     alert('搜索失败');\r\n      //   }\r\n      // },\r\n\r\n      // async fetchNotes() {\r\n      // const token = localStorage.getItem('token');\r\n      // if (!token) {\r\n      //   alert('请先登录');\r\n      //   return;\r\n      // }\r\n\r\n      // try {\r\n      //   // 获取所有笔记ID\r\n      //   const response = await fetch('/api/notes', {\r\n      //     method: 'GET',\r\n      //     headers: {\r\n      //       'Authorization': `Bearer ${token}`\r\n      //     }\r\n      //   });\r\n\r\n      //   const data = await response.json();\r\n      //   if (data.code === 200) {\r\n      //     // 获取每个笔记的详细信息\r\n      //     const notePromises = data.data.noteId.map(id => this.fetchNoteDetails(id));\r\n      //     this.notes = await Promise.all(notePromises);\r\n      //   } else if (data.code === 501) {\r\n      //     alert('token验证失败');\r\n      //   } else {\r\n      //     alert('获取笔记列表失败');\r\n      //   }\r\n      // } catch (error) {\r\n      //   console.error('获取笔记列表时出错:', error);\r\n      //   alert('获取笔记列表失败');\r\n      // }\r\n      // },\r\n\r\n      // async fetchNoteDetails(noteId) {\r\n      //   const token = localStorage.getItem('token');\r\n      //   const response = await fetch(`/api/${noteId}`, {\r\n      //     method: 'GET',\r\n      //     headers: {\r\n      //       'Authorization': `Bearer ${token}`\r\n      //     }\r\n      //   });\r\n\r\n      //   const data = await response.json();\r\n      //   if (data.code === 200) {\r\n      //     return data.data;\r\n      //   } else {\r\n      //     console.error(`获取笔记 ${noteId} 详情失败`);\r\n      //     return null;\r\n      //   }\r\n      // },\r\n\r\n      // formatDate(dateString) {\r\n      // const date = new Date(dateString);\r\n      // return date.toLocaleString(); // 格式化日期\r\n      // }\r\n\r\n      formatDate(dateString) {   //模拟formatDate\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString('zh-CN', { \r\n        year: 'numeric', \r\n        month: '2-digit', \r\n        day: '2-digit', \r\n        hour: '2-digit', \r\n        minute: '2-digit' \r\n      });\r\n    }\r\n    },\r\n    watch: {\r\n      searchKeyword() {\r\n        this.keywordSearch();\r\n      }\r\n    },\r\n    //模拟时不需要\r\n    mounted() {\r\n      // this.fetchNotes(); // 组件挂载时获取笔记列表\r\n      this.filteredNotes = this.notes;\r\n    }\r\n    \r\n  };\r\n  </script>\r\n  \r\n<style scoped>\r\n  .container {\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n  \r\n.sidebar {\r\n  width: 200px;\r\n  height: 100%;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  border-right: 1px solid #e0e0e0;\r\n  background-color: #ffffff;\r\n  text-align: center;\r\n  padding-top: 20px;\r\n  box-shadow: 2px 0 5px rgba(0,0,0,0.1);\r\n  z-index: 10;\r\n}\r\n\r\n.sidebar-item {\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n  cursor: pointer;\r\n  color: #333;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.sidebar-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.sidebar-username {\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.icon-placeholder {\r\n    width: 60px; /* 设置圆形宽度 */\r\n    height: 60px; /* 设置圆形高度 */\r\n    background-color: #87d37c; /* 设置圆形背景颜色 */\r\n    border-radius: 50%; /* 使元素为圆形 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 10px; /* 圆形与文字之间的间距 */\r\n}\r\n\r\n.icon-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover; /* 确保图片填满圆形且不变形 */\r\n}\r\n\r\n.sidebar-item span {\r\n    font-size: 14px; /* 设置文字大小 */\r\n}\r\n\r\n/* 选中效果 */\r\n.start-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border-radius: 20px;\r\n  padding: 10px 20px;\r\n  margin: 10px 20px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.start-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n\r\n\r\n.main-content {\r\n  margin-left: 200px; /* 与sidebar宽度相同 */\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 20px;\r\n  overflow-y: auto;\r\n  height: 100vh;\r\n}\r\n  .top-content {\r\n    height: 7%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .top-left, .top-right {\r\n    position: relative; /* 相对定位 */\r\n  }\r\n  \r\n  .button-container {\r\n    position: relative; /* 相对定位 */\r\n  }\r\n  \r\n  .button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 150px;\r\n    height: 50px;\r\n    background-color: var(--primary-color);\r\n    color: white;\r\n    border-radius: 25px;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n  }\r\n\r\n  \r\n  .dropdown {\r\n    display: none; /* 默认隐藏 */\r\n    position: absolute; /* 绝对定位 */\r\n    top: 100%; /* 紧挨着按钮下面 */\r\n    left: 0;\r\n    width: 100%; /* 与按钮同宽 */\r\n    background-color: #e0e0e0;\r\n    border-radius: 5px;\r\n    flex-direction: column;\r\n    z-index: 1; /* 确保下拉框在前面 */\r\n  }\r\n  \r\n  .dropdown-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 150px; /* 与按钮同宽 */\r\n    height: 60px; /* 与按钮同高 */\r\n    border-top: 1px solid #ccc;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .button-container:hover .dropdown {\r\n    display: flex; /* 鼠标悬停时显示下拉框 */\r\n  }\r\n  \r\n  .search-bar {\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    position: relative;\r\n  }\r\n  \r\n  .search-bar input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin-top: 25px;\r\n  }\r\n  \r\n  .search-button {\r\n    width: 20px;\r\n    height: 20px;\r\n    background-color: red;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    right: 30px;\r\n    cursor: pointer;\r\n    margin-top: 25px;\r\n  }\r\n  \r\n  .bottom-content {\r\n    margin-top: 20px;\r\n    padding: 0 20px;\r\n    flex-grow: 1; /* 让 bottom-content 占据剩余空间 */\r\n    display: flex;\r\n    position: relative;\r\n  }\r\n  \r\n  .note-list {\r\n    flex-grow: 1; /* 让 note-list 占据剩余空间 */\r\n    background-color: #d3d3d3;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 20px;\r\n    padding:20px;\r\n    align-items: center;\r\n    \r\n    margin-bottom: 30px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .side-buttons {\r\n    width: 150px; /* 调整按钮宽度 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    padding-right: 20px;\r\n    padding-top: 200px; /* 增加左边间隔 */\r\n  }\r\n  \r\n  .side-button {\r\n    background-color: #8b4513;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    padding: 10px; /* 调整按钮内边距 */\r\n    margin: 5px 0; /* 调整按钮间距 */\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n    font-size: 1em; /* 调整按钮字体大小 */\r\n    height: 50px; /* 调整按钮高度 */\r\n  }\r\n  \r\n  .modal {\r\n    display: flex;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    background-color: rgba(0,0,0,0.4);\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  /* 新建笔记本UI*/\r\n  .modal-content {\r\n    background-color: #fefefe;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: 40%;\r\n    border-radius: 10px;\r\n  }\r\n  \r\n  .modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 25%;\r\n  }\r\n  \r\n  .modal-header h2 {\r\n    margin: 0;\r\n    flex: 1;\r\n  }\r\n  \r\n  \r\n  .modal-header .close {\r\n    color: #aaa;\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .modal-header .close:hover,\r\n  .modal-header .close:focus {\r\n    color: black;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .modal-body {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .modal-body h3 {\r\n    margin: 10px 0;\r\n  }\r\n  \r\n  .modal-body div {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .modal-body label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .modal-body input, .modal-body textarea {\r\n    width: 100%;\r\n    padding: 8px;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  .modal-body textarea {\r\n    height: 100px; /* 设置简介文本框的高度 */\r\n    resize: none;\r\n  }\r\n  \r\n  .modal-actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .modal-actions button {\r\n    padding: 10px 20px;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .note-item {\r\n    background-color: white;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-bottom: 20px;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n    transition: var(--transition);\r\n    width: calc(33.333% - 20px);\r\n  }\r\n\r\n  .note-item:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n  }\r\n\r\n  .note-item h3 {\r\n    margin: 0 0 10px 0;\r\n    color: var(--primary-color);\r\n  }\r\n\r\n  .note-item p {\r\n    margin: 0;\r\n    font-size: 0.9em;\r\n    color: #666;\r\n  }\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}