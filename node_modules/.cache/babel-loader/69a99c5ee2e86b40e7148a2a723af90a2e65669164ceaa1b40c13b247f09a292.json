{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TreeNode from './TreeNode.vue';\nconst defaultTree1 = {\n  \"resId\": 0,\n  \"parentId\": null,\n  \"resName\": \"SWOT分析\",\n  \"extend\": true,\n  \"children\": [{\n    \"resId\": 1,\n    \"parentId\": 0,\n    \"resName\": \"优势\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 2,\n    \"parentId\": 0,\n    \"resName\": \"劣势\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 3,\n    \"parentId\": 0,\n    \"resName\": \"机会\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 4,\n    \"parentId\": 0,\n    \"resName\": \"威胁\",\n    \"extend\": true,\n    \"children\": []\n  }]\n};\nconst defaultTree2 = {\n  \"resId\": 0,\n  \"parentId\": null,\n  \"resName\": \"5W1H分析\",\n  \"extend\": true,\n  \"children\": [{\n    \"resId\": 1,\n    \"parentId\": 0,\n    \"resName\": \"What (什么)\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 2,\n    \"parentId\": 0,\n    \"resName\": \"Why (为什么)\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 3,\n    \"parentId\": 0,\n    \"resName\": \"Who (谁)\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 4,\n    \"parentId\": 0,\n    \"resName\": \"Where (在哪里)\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 5,\n    \"parentId\": 0,\n    \"resName\": \"When (何时)\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 6,\n    \"parentId\": 0,\n    \"resName\": \"How (如何)\",\n    \"extend\": true,\n    \"children\": []\n  }]\n};\nconst defaultTree3 = {\n  \"resId\": 0,\n  \"parentId\": null,\n  \"resName\": \"时间管理四象限分析\",\n  \"extend\": true,\n  \"children\": [{\n    \"resId\": 1,\n    \"parentId\": 0,\n    \"resName\": \"第一象限：紧急且重要\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 2,\n    \"parentId\": 0,\n    \"resName\": \"第二象限：不紧急但重要\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 3,\n    \"parentId\": 0,\n    \"resName\": \"第三象限：紧急但不重要\",\n    \"extend\": true,\n    \"children\": []\n  }, {\n    \"resId\": 4,\n    \"parentId\": 0,\n    \"resName\": \"第四象限：不紧急且不重要\",\n    \"extend\": true,\n    \"children\": []\n  }]\n};\nconst defaultTree4 = {\n  \"resId\": 0,\n  \"parentId\": null,\n  \"resName\": \"根节点\",\n  \"extend\": true,\n  \"children\": []\n};\nexport default {\n  name: 'TreeChart',\n  components: {\n    TreeNode\n  },\n  props: {\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    initialTree: {\n      type: Object,\n      default: () => JSON.parse(JSON.stringify(defaultTree4))\n    }\n  },\n  data() {\n    return {\n      currentTree: JSON.parse(JSON.stringify(defaultTree4)),\n      // 深拷贝 defaultTree4 作为默认模板\n      scale: 1,\n      selectedTemplate: 'defaultTree4',\n      templates: {\n        defaultTree1,\n        defaultTree2,\n        defaultTree3,\n        defaultTree4\n      }\n    };\n  },\n  methods: {\n    //切换模板函数\n    changeTemplate() {\n      // 切换模板时，直接使用选定模板的深拷贝\n      this.currentTree = JSON.parse(JSON.stringify(this.templates[this.selectedTemplate]));\n    },\n    //新增节点函数\n    add(node) {\n      const newNode = {\n        resId: Date.now(),\n        parentId: node.resId,\n        resName: '新节点',\n        message: '',\n        extend: true,\n        children: []\n      };\n      if (!node.children) {\n        this.$set(node, 'children', []);\n      }\n      node.children.push(newNode);\n      this.$forceUpdate();\n    },\n    //更新结点函数\n    update(node) {\n      console.log('节点已更新:', node);\n    },\n    //删除结点函数\n    remove(node) {\n      if (node.resId === 0) {\n        alert('根节点不能删除');\n        return;\n      }\n      const removeNode = (tree, nodeToRemove) => {\n        for (let i = 0; i < tree.length; i++) {\n          if (tree[i] === nodeToRemove) {\n            tree.splice(i, 1);\n            return true;\n          }\n          if (tree[i].children && tree[i].children.length > 0) {\n            if (removeNode(tree[i].children, nodeToRemove)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n      removeNode([this.currentTree], node);\n      this.$forceUpdate();\n    },\n    //向后端发送currentTree数据\n    saveTree() {\n      fetch('/api/save-tree', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.currentTree)\n      }).then(response => response.json()).then(data => {\n        console.log('树结构已成功保存到后端');\n      }).catch(error => {\n        console.error('保存树结构时出错:', error);\n      });\n    },\n    //用于从服务器加载树结构数据\n    loadTree() {\n      fetch('/api/load-tree').then(response => response.json()).then(data => {\n        this.currentTree = data;\n      }).catch(error => {\n        console.error('加载失败', error);\n      });\n    }\n  },\n  mounted() {\n    // 组件挂载时默认使用 defaultTree4\n    if (this.readOnly) {\n      this.currentTree = JSON.parse(JSON.stringify(this.initialTree));\n    } else {\n      this.currentTree = JSON.parse(JSON.stringify(defaultTree4));\n    }\n  }\n};","map":{"version":3,"names":["TreeNode","defaultTree1","defaultTree2","defaultTree3","defaultTree4","name","components","props","readOnly","type","Boolean","default","initialTree","Object","JSON","parse","stringify","data","currentTree","scale","selectedTemplate","templates","methods","changeTemplate","add","node","newNode","resId","Date","now","parentId","resName","message","extend","children","$set","push","$forceUpdate","update","console","log","remove","alert","removeNode","tree","nodeToRemove","i","length","splice","saveTree","fetch","method","headers","body","then","response","json","catch","error","loadTree","mounted"],"sources":["D:\\VUEitem\\front\\src\\components\\NoteCreateTree.vue"],"sourcesContent":["<template>\r\n    <div class=\"tree-chart\">\r\n      <div v-if=\"!readOnly\" class=\"template-selector\">\r\n        <select  v-model=\"selectedTemplate\" @change=\"changeTemplate\">\r\n          <option value=\"defaultTree1\">SWOT分析</option>\r\n          <option value=\"defaultTree2\">5W1H分析</option>\r\n          <option value=\"defaultTree3\">时间管理四象限分析</option>\r\n          <option value=\"defaultTree4\">单一根节点</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"zoom-controls\">\r\n        <button @click=\"scale -= 0.1\">缩小</button>\r\n        <button @click=\"scale = 1\">重置</button>\r\n        <button @click=\"scale += 0.1\">放大</button>\r\n      </div>\r\n      <div class=\"tree-container-wrapper\">\r\n        <div class=\"tree-container\" :style=\"{ transform: `scale(${scale})` }\">\r\n          <TreeNode :model=\"currentTree\" @on-add=\"add\" @on-update=\"update\" @on-remove=\"remove\"/>\r\n        </div>\r\n      </div>\r\n  \r\n      <!--向后端发送树结构的数据-->\r\n      <button v-if=\"!readOnly\" @click=\"saveTree\">保存树结构</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import TreeNode from './TreeNode.vue'\r\n  \r\n  const defaultTree1 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"SWOT分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"优势\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"劣势\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"机会\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"威胁\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree2 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"5W1H分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"What (什么)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"Why (为什么)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"Who (谁)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"Where (在哪里)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 5, \"parentId\": 0, \"resName\": \"When (何时)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 6, \"parentId\": 0, \"resName\": \"How (如何)\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree3 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"时间管理四象限分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"第一象限：紧急且重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"第二象限：不紧急但重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"第三象限：紧急但不重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"第四象限：不紧急且不重要\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree4 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"根节点\",\r\n    \"extend\": true,\r\n    \"children\": []\r\n  }\r\n  \r\n  export default {\r\n    name: 'TreeChart',\r\n    components: {\r\n      TreeNode\r\n    },\r\n    props: {\r\n      readOnly: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      initialTree: {\r\n        type: Object,\r\n        default: () => JSON.parse(JSON.stringify(defaultTree4))\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        currentTree: JSON.parse(JSON.stringify(defaultTree4)), // 深拷贝 defaultTree4 作为默认模板\r\n        scale: 1,\r\n        selectedTemplate: 'defaultTree4',\r\n        templates: {\r\n          defaultTree1,\r\n          defaultTree2,\r\n          defaultTree3,\r\n          defaultTree4\r\n        }\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      //切换模板函数\r\n      changeTemplate() {\r\n        // 切换模板时，直接使用选定模板的深拷贝\r\n        this.currentTree = JSON.parse(JSON.stringify(this.templates[this.selectedTemplate]))\r\n      },\r\n      //新增节点函数\r\n      add(node) {\r\n        const newNode = {\r\n          resId: Date.now(),\r\n          parentId: node.resId,\r\n          resName: '新节点',\r\n          message: '',\r\n          extend: true,\r\n          children: []\r\n        }\r\n        if (!node.children) {\r\n          this.$set(node, 'children', [])\r\n        }\r\n        node.children.push(newNode)\r\n        this.$forceUpdate()\r\n      },\r\n      //更新结点函数\r\n      update(node) {\r\n        console.log('节点已更新:', node)\r\n      },\r\n      //删除结点函数\r\n      remove(node) {\r\n        if (node.resId === 0) {\r\n          alert('根节点不能删除')\r\n          return\r\n        }\r\n        const removeNode = (tree, nodeToRemove) => {\r\n          for (let i = 0; i < tree.length; i++) {\r\n            if (tree[i] === nodeToRemove) {\r\n              tree.splice(i, 1)\r\n              return true\r\n            }\r\n            if (tree[i].children && tree[i].children.length > 0) {\r\n              if (removeNode(tree[i].children, nodeToRemove)) {\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          return false\r\n        }\r\n        removeNode([this.currentTree], node)\r\n        this.$forceUpdate()\r\n      },\r\n      //向后端发送currentTree数据\r\n      saveTree() {\r\n        fetch('/api/save-tree', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(this.currentTree)\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log('树结构已成功保存到后端');\r\n        })\r\n        .catch((error) => {\r\n          console.error('保存树结构时出错:', error);\r\n        });\r\n      },\r\n      //用于从服务器加载树结构数据\r\n      loadTree() {\r\n        fetch('/api/load-tree')\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            this.currentTree = data;\r\n          })\r\n          .catch(error => {\r\n            console.error('加载失败', error);\r\n          });\r\n      }\r\n    },\r\n    mounted() {\r\n      // 组件挂载时默认使用 defaultTree4\r\n      if (this.readOnly) {\r\n      this.currentTree = JSON.parse(JSON.stringify(this.initialTree))\r\n    } else {\r\n      this.currentTree = JSON.parse(JSON.stringify(defaultTree4))\r\n    }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .tree-chart {\r\n    text-align: center;\r\n  }\r\n  \r\n  .template-selector,\r\n  .zoom-controls {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .tree-container-wrapper {\r\n    overflow: auto;\r\n  }\r\n  \r\n  .tree-container {\r\n    transform-origin: 0 0;\r\n  }\r\n  </style>\r\n    \r\n    <style lang=\"scss\">\r\n  .tree-chart {\r\n    height: 100%;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-top: 50px;\r\n    overflow-x: auto;\r\n    overflow-y: auto;\r\n    min-height: 100vh;\r\n  \r\n    .zoom-controls {\r\n      position: fixed;\r\n      top: 10px;\r\n      right: 10px;\r\n      z-index: 1000;\r\n  \r\n      button {\r\n        margin-left: 5px;\r\n        padding: 5px 10px;\r\n        background-color: #f0f0f0;\r\n        border: 1px solid #ccc;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n  \r\n        &:hover {\r\n          background-color: #e0e0e0;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .tree-container-wrapper {\r\n      width: 100%; // 可以调整这个值来改变容器宽度\r\n      height: 50vh; // 可以调整这个值来改变容器高度\r\n      border: 2px solid #ccc; // 添加边框\r\n      background-color: beige; //背景色\r\n      border-radius: 10px; // 添加圆角\r\n      overflow: auto; // 允许内容溢出时滚动\r\n      margin-top: -20px; \r\n      position: relative; // 添加相对定位\r\n    }\r\n  \r\n    .tree-container {\r\n      transform-origin: center top;\r\n      transition: transform 0.3s ease;\r\n      min-width: 100%;\r\n      min-height: 100%;\r\n      display: flex;\r\n      justify-content: center; // 水平居中\r\n      align-items: flex-start; // 从顶部开始\r\n      justify-content: center;\r\n      padding: 20px;\r\n      box-sizing: border-box;\r\n      position: absolute; // 使用绝对定位\r\n      left: 0; // 将左边缘置于容器中心\r\n      transform: translateX(-50%); // 向左移动自身宽度的一半\r\n    }\r\n  }\r\n  \r\n  // 响应式调整\r\n  @media (max-width: 768px) {\r\n    .tree-chart {\r\n      padding-top: 20px;\r\n  \r\n  \r\n      .tree-container-wrapper {\r\n        width: 100%;\r\n        height: 70vh;\r\n      }\r\n    }\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}