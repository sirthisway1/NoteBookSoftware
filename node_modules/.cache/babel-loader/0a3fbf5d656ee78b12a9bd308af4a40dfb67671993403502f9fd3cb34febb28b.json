{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CreateNoteModal from './CreateNoteModal.vue';\nexport default {\n  components: {\n    CreateNoteModal\n  },\n  data() {\n    return {\n      username: '这里填写用户名',\n      isModalVisible: false,\n      isCreateNoteModalVisible: false,\n      newNotebookName: '',\n      newNotebookDescription: '',\n      notes: [] //存储笔记列表\n    };\n  },\n  methods: {\n    goToStart() {\n      this.$router.push({\n        name: 'Start'\n      });\n    },\n    goToNotebook() {\n      this.$router.push({\n        name: 'Notebook'\n      }); // 这里需要在路由中添加对应路径\n    },\n    goToCommunity() {\n      this.$router.push({\n        name: 'Community'\n      }); // 这里需要在路由中添加对应路径\n    },\n    search() {\n      // 处理搜索逻辑\n      alert(\"搜索功能尚未实现\");\n    },\n    showCreateNoteModal() {\n      this.isCreateNoteModalVisible = true;\n    },\n    hideCreateNoteModal() {\n      this.isCreateNoteModalVisible = false;\n    },\n    showNewNotebookModal() {\n      this.isModalVisible = true;\n    },\n    hideNewNotebookModal() {\n      this.isModalVisible = false;\n    },\n    async createNotebook() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('请先登录');\n        return;\n      }\n      const response = await fetch('/api/notebooks/createNotebooks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          name: this.newNotebookName,\n          summary: this.newNotebookDescription\n        })\n      });\n      const data = await response.json();\n      if (data.code === 200) {\n        alert('笔记本创建成功');\n        this.hideNewNotebookModal();\n        // 处理笔记本创建成功后的逻辑\n      } else if (data.code === 501) {\n        alert('token验证失败');\n      } else {\n        alert('创建笔记本失败');\n      }\n    },\n    async fetchNotes() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        alert('请先登录');\n        return;\n      }\n      try {\n        // 获取所有笔记ID\n        const response = await fetch('/api/notes', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        if (data.code === 200) {\n          // 获取每个笔记的详细信息\n          const notePromises = data.data.noteId.map(id => this.fetchNoteDetails(id));\n          this.notes = await Promise.all(notePromises);\n        } else if (data.code === 501) {\n          alert('token验证失败');\n        } else {\n          alert('获取笔记列表失败');\n        }\n      } catch (error) {\n        console.error('获取笔记列表时出错:', error);\n        alert('获取笔记列表失败');\n      }\n    },\n    async fetchNoteDetails(noteId) {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/${noteId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      if (data.code === 200) {\n        return data.data;\n      } else {\n        console.error(`获取笔记 ${noteId} 详情失败`);\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["CreateNoteModal","components","data","username","isModalVisible","isCreateNoteModalVisible","newNotebookName","newNotebookDescription","notes","methods","goToStart","$router","push","name","goToNotebook","goToCommunity","search","alert","showCreateNoteModal","hideCreateNoteModal","showNewNotebookModal","hideNewNotebookModal","createNotebook","token","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","summary","json","code","fetchNotes","notePromises","noteId","map","id","fetchNoteDetails","Promise","all","error","console"],"sources":["D:\\VUEitem\\front\\src\\components\\Start.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n      <div class=\"sidebar\">\r\n        <div class=\"sidebar-item\" id=\"username\">{{ username }}</div>\r\n        <div class=\"sidebar-item start-button\" @click=\"goToStart\">\r\n          <div class=\"icon-placeholder\"></div>\r\n          <span>开始</span>\r\n        </div>\r\n        <div class=\"sidebar-item\" @click=\"goToNotebook\">笔记本</div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">发现社区</div>\r\n        <div class=\"sidebar-item\" @click=\"goToCommunity\">标签管理</div>\r\n      </div>\r\n      <div class=\"main-content\">\r\n        <div class=\"top-content\">\r\n          <div class=\"top-left\">\r\n            <div class=\"button-container\">\r\n              <div class=\"button\">新建笔记</div>\r\n              <div class=\"dropdown\">\r\n                <div class=\"dropdown-item\" @click=\"showCreateNoteModal\">新建日常笔记</div>\r\n                <div class=\"dropdown-item\">SWOT模板思维笔记 @click=\"\"</div>\r\n                <div class=\"dropdown-item\">5W1H模板思维笔记</div>\r\n                <div class=\"dropdown-item\">时间管理四象限模板思维笔记</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"top-right\">\r\n            <div class=\"button\" @click=\"showNewNotebookModal\">新建笔记本</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"search-bar\">\r\n          <input type=\"text\" placeholder=\"搜索/标签搜索\">\r\n          <div class=\"search-button\" @click=\"search\"></div>\r\n        </div>\r\n        <div class=\"bottom-content\">\r\n          <div class=\"note-list\">所有笔记列表</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"side-buttons\">\r\n        <div class=\"side-button\">查看收藏列表</div>\r\n        <div class=\"side-button\">查看私密列表</div>\r\n      </div>\r\n      <div class=\"bottom-content\">\r\n        <div class=\"note-list\">\r\n          <div v-for=\"note in notes\" :key=\"note.noteId\" class=\"note-item\">\r\n            <h3>{{ note.name }}</h3>\r\n            <p>最后修改日期: {{ formatDate(note.lastModified) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 新建笔记本的模态框 -->\r\n      <div class=\"modal\" v-if=\"isModalVisible\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h2>新建笔记本</h2>\r\n            <span class=\"close\" @click=\"hideNewNotebookModal\">&times;</span>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <h3>基本信息</h3>\r\n            <div>\r\n              <label>笔记本名称:</label>\r\n              <input type=\"text\" v-model=\"newNotebookName\">\r\n            </div>\r\n            <div>\r\n              <label>简介:</label>\r\n              <textarea v-model=\"newNotebookDescription\"></textarea>\r\n            </div>\r\n            <div class=\"modal-actions\">\r\n              <button @click=\"createNotebook\">创建</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- 包含模态框组件 -->\r\n      <CreateNoteModal :visible=\"isCreateNoteModalVisible\" @close=\"hideCreateNoteModal\" />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import CreateNoteModal from './CreateNoteModal.vue';\r\n  export default {\r\n    components: {\r\n      CreateNoteModal,\r\n    },\r\n    data() {\r\n      return {\r\n        username: '这里填写用户名', \r\n        isModalVisible: false,\r\n        isCreateNoteModalVisible: false,\r\n        newNotebookName: '',\r\n        newNotebookDescription: '',\r\n        notes:[], //存储笔记列表\r\n      };\r\n    },\r\n    methods: {\r\n      goToStart() {\r\n        this.$router.push({ name: 'Start' });\r\n      },\r\n      goToNotebook() {\r\n        this.$router.push({ name: 'Notebook' }); // 这里需要在路由中添加对应路径\r\n      },\r\n      goToCommunity() {\r\n        this.$router.push({ name: 'Community' }); // 这里需要在路由中添加对应路径\r\n      },\r\n      search() {\r\n        // 处理搜索逻辑\r\n        alert(\"搜索功能尚未实现\");\r\n      },\r\n      showCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = true;\r\n      },\r\n      hideCreateNoteModal() {\r\n      this.isCreateNoteModalVisible = false;\r\n      },\r\n      showNewNotebookModal() {\r\n        this.isModalVisible = true;\r\n      },\r\n      hideNewNotebookModal() {\r\n        this.isModalVisible = false;\r\n      },\r\n      async createNotebook() {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          alert('请先登录');\r\n          return;\r\n        }\r\n  \r\n        const response = await fetch('/api/notebooks/createNotebooks', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n          },\r\n          body: JSON.stringify({\r\n            name: this.newNotebookName,\r\n            summary: this.newNotebookDescription,\r\n          })\r\n        });\r\n  \r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          alert('笔记本创建成功');\r\n          this.hideNewNotebookModal();\r\n          // 处理笔记本创建成功后的逻辑\r\n        } else if (data.code === 501) {\r\n          alert('token验证失败');\r\n        } else {\r\n          alert('创建笔记本失败');\r\n        }\r\n      },\r\n\r\n      async fetchNotes() {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('请先登录');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // 获取所有笔记ID\r\n        const response = await fetch('/api/notes', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.code === 200) {\r\n          // 获取每个笔记的详细信息\r\n          const notePromises = data.data.noteId.map(id => this.fetchNoteDetails(id));\r\n          this.notes = await Promise.all(notePromises);\r\n        } else if (data.code === 501) {\r\n          alert('token验证失败');\r\n        } else {\r\n          alert('获取笔记列表失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('获取笔记列表时出错:', error);\r\n        alert('获取笔记列表失败');\r\n      }\r\n      },\r\n\r\n      async fetchNoteDetails(noteId) {\r\n        const token = localStorage.getItem('token');\r\n        const response = await fetch(`/api/${noteId}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n      const data = await response.json();\r\n      if (data.code === 200) {\r\n        return data.data;\r\n      } else {\r\n        console.error(`获取笔记 ${noteId} 详情失败`);\r\n        return null;\r\n      }\r\n    },\r\n\r\n\r\n\r\n    }\r\n  };\r\n  </script>\r\n  \r\n<style scoped>\r\n  .container {\r\n    display: flex;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .sidebar {\r\n    width: 16.6666%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    border-right: 1px solid #ccc;\r\n    background-color: #f5f5f5; /* 设置背景颜色为浅灰色 */\r\n    text-align: center;\r\n    padding-top: 20px; /* 添加顶部填充，使内容与顶部有间距 */\r\n}\r\n  \r\n.sidebar-item {\r\n    height: auto; /* 自动高度 */\r\n    display: flex;\r\n    flex-direction: column; /* 垂直布局 */\r\n    align-items: center; /* 居中对齐 */\r\n    justify-content: center;\r\n    padding: 20px 0; /* 添加上下填充，使每个项之间有间距 */\r\n    cursor: pointer;\r\n    color: #000; /* 设置文字颜色为黑色 */\r\n}\r\n\r\n.icon-placeholder {\r\n    width: 60px; /* 设置圆形宽度 */\r\n    height: 60px; /* 设置圆形高度 */\r\n    background-color: #87d37c; /* 设置圆形背景颜色 */\r\n    border-radius: 50%; /* 使元素为圆形 */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 10px; /* 圆形与文字之间的间距 */\r\n}\r\n\r\n.sidebar-item span {\r\n    font-size: 14px; /* 设置文字大小 */\r\n}\r\n\r\n/* 选中效果 */\r\n.start-button {\r\n    background-color: #696969; /* 深灰色 */\r\n    color: white; /* 文字颜色为白色 */\r\n    border-radius: 10px; /* 圆角背景 */\r\n    padding: 10px 20px; /* 内边距 */\r\n}\r\n\r\n\r\n  .main-content {\r\n    flex-grow: 1; /* 让 main-content 占据剩余空间 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-left: 20px; /* 增加左边间隔 */\r\n  }\r\n  \r\n  .top-content {\r\n    height: 7%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .top-left, .top-right {\r\n    position: relative; /* 相对定位 */\r\n  }\r\n  \r\n  .button-container {\r\n    position: relative; /* 相对定位 */\r\n  }\r\n  \r\n  .button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 150px;\r\n    height: 60px;\r\n    background-color: #e0e0e0;\r\n    border-radius: 5px;\r\n    margin-top: 20px;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .dropdown {\r\n    display: none; /* 默认隐藏 */\r\n    position: absolute; /* 绝对定位 */\r\n    top: 100%; /* 紧挨着按钮下面 */\r\n    left: 0;\r\n    width: 100%; /* 与按钮同宽 */\r\n    background-color: #e0e0e0;\r\n    border-radius: 5px;\r\n    flex-direction: column;\r\n    z-index: 1; /* 确保下拉框在前面 */\r\n  }\r\n  \r\n  .dropdown-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 150px; /* 与按钮同宽 */\r\n    height: 60px; /* 与按钮同高 */\r\n    border-top: 1px solid #ccc;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .button-container:hover .dropdown {\r\n    display: flex; /* 鼠标悬停时显示下拉框 */\r\n  }\r\n  \r\n  .search-bar {\r\n    height: 50px;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0 20px;\r\n    position: relative;\r\n  }\r\n  \r\n  .search-bar input {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin-top: 25px;\r\n  }\r\n  \r\n  .search-button {\r\n    width: 20px;\r\n    height: 20px;\r\n    background-color: red;\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    right: 30px;\r\n    cursor: pointer;\r\n    margin-top: 25px;\r\n  }\r\n  \r\n  .bottom-content {\r\n    margin-top: 20px;\r\n    padding: 0 20px;\r\n    flex-grow: 1; /* 让 bottom-content 占据剩余空间 */\r\n    display: flex;\r\n    position: relative;\r\n  }\r\n  \r\n  .note-list {\r\n    flex-grow: 1; /* 让 note-list 占据剩余空间 */\r\n    background-color: #d3d3d3;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-bottom: 30px;\r\n  }\r\n  \r\n  .side-buttons {\r\n    width: 150px; /* 调整按钮宽度 */\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    padding-right: 20px;\r\n    padding-top: 200px; /* 增加左边间隔 */\r\n  }\r\n  \r\n  .side-button {\r\n    background-color: #8b4513;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    padding: 10px; /* 调整按钮内边距 */\r\n    margin: 5px 0; /* 调整按钮间距 */\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n    font-size: 1em; /* 调整按钮字体大小 */\r\n    height: 50px; /* 调整按钮高度 */\r\n  }\r\n  \r\n  .modal {\r\n    display: flex;\r\n    position: fixed;\r\n    z-index: 1;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    background-color: rgba(0,0,0,0.4);\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  /* 新建笔记本UI*/\r\n  .modal-content {\r\n    background-color: #fefefe;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: 40%;\r\n    border-radius: 10px;\r\n  }\r\n  \r\n  .modal-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 25%;\r\n  }\r\n  \r\n  .modal-header h2 {\r\n    margin: 0;\r\n    flex: 1;\r\n  }\r\n  \r\n  \r\n  .modal-header .close {\r\n    color: #aaa;\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .modal-header .close:hover,\r\n  .modal-header .close:focus {\r\n    color: black;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .modal-body {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .modal-body h3 {\r\n    margin: 10px 0;\r\n  }\r\n  \r\n  .modal-body div {\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .modal-body label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  .modal-body input, .modal-body textarea {\r\n    width: 100%;\r\n    padding: 8px;\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  .modal-body textarea {\r\n    height: 100px; /* 设置简介文本框的高度 */\r\n    resize: none;\r\n  }\r\n  \r\n  .modal-actions {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .modal-actions button {\r\n    padding: 10px 20px;\r\n    font-size: 1rem;\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}