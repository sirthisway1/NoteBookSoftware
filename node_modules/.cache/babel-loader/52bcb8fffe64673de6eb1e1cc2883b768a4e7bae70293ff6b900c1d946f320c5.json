{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5a3e0f08\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"tree-chart\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"template-selector\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"defaultTree1\"\n}, \"SWOT分析\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"defaultTree2\"\n}, \"5W1H分析\", -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"defaultTree3\"\n}, \"时间管理四象限分析\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"defaultTree4\"\n}, \"单一根节点\", -1 /* HOISTED */));\nconst _hoisted_7 = [_hoisted_3, _hoisted_4, _hoisted_5, _hoisted_6];\nconst _hoisted_8 = {\n  class: \"zoom-controls\"\n};\nconst _hoisted_9 = {\n  class: \"tree-container-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TreeNode = _resolveComponent(\"TreeNode\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$props.readOnly ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedTemplate = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.changeTemplate && $options.changeTemplate(...args))\n  }, [..._hoisted_7], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.selectedTemplate]])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $data.scale -= 0.1)\n  }, \"缩小\"), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = $event => $data.scale = 1)\n  }, \"重置\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = $event => $data.scale += 0.1)\n  }, \"放大\")]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", {\n    class: \"tree-container\",\n    style: _normalizeStyle({\n      transform: `scale(${$data.scale})`\n    })\n  }, [_createVNode(_component_TreeNode, {\n    model: $data.currentTree,\n    onOnAdd: $options.add,\n    onOnUpdate: $options.update,\n    onOnRemove: $options.remove\n  }, null, 8 /* PROPS */, [\"model\", \"onOnAdd\", \"onOnUpdate\", \"onOnRemove\"])], 4 /* STYLE */)]), _createCommentVNode(\"向后端发送树结构的数据\"), !$props.readOnly ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.saveTree && $options.saveTree(...args))\n  }, \"保存树结构\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","value","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_createElementBlock","_hoisted_1","$props","readOnly","_hoisted_2","_cache","$event","$data","selectedTemplate","onChange","args","$options","changeTemplate","_hoisted_7","_createCommentVNode","_hoisted_8","onClick","scale","_hoisted_9","style","_normalizeStyle","transform","_createVNode","_component_TreeNode","model","currentTree","onOnAdd","add","onOnUpdate","update","onOnRemove","remove","saveTree"],"sources":["D:\\VUEitem\\front\\src\\components\\NoteCreateTree.vue"],"sourcesContent":["<template>\r\n    <div class=\"tree-chart\">\r\n      <div v-if=\"!readOnly\" class=\"template-selector\">\r\n        <select  v-model=\"selectedTemplate\" @change=\"changeTemplate\">\r\n          <option value=\"defaultTree1\">SWOT分析</option>\r\n          <option value=\"defaultTree2\">5W1H分析</option>\r\n          <option value=\"defaultTree3\">时间管理四象限分析</option>\r\n          <option value=\"defaultTree4\">单一根节点</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"zoom-controls\">\r\n        <button @click=\"scale -= 0.1\">缩小</button>\r\n        <button @click=\"scale = 1\">重置</button>\r\n        <button @click=\"scale += 0.1\">放大</button>\r\n      </div>\r\n      <div class=\"tree-container-wrapper\">\r\n        <div class=\"tree-container\" :style=\"{ transform: `scale(${scale})` }\">\r\n          <TreeNode :model=\"currentTree\" @on-add=\"add\" @on-update=\"update\" @on-remove=\"remove\"/>\r\n        </div>\r\n      </div>\r\n  \r\n      <!--向后端发送树结构的数据-->\r\n      <button v-if=\"!readOnly\" @click=\"saveTree\">保存树结构</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import TreeNode from './TreeNode.vue'\r\n  \r\n  const defaultTree1 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"SWOT分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"优势\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"劣势\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"机会\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"威胁\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree2 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"5W1H分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"What (什么)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"Why (为什么)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"Who (谁)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"Where (在哪里)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 5, \"parentId\": 0, \"resName\": \"When (何时)\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 6, \"parentId\": 0, \"resName\": \"How (如何)\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree3 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"时间管理四象限分析\",\r\n    \"extend\": true,\r\n    \"children\": [\r\n      {\"resId\": 1, \"parentId\": 0, \"resName\": \"第一象限：紧急且重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 2, \"parentId\": 0, \"resName\": \"第二象限：不紧急但重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 3, \"parentId\": 0, \"resName\": \"第三象限：紧急但不重要\", \"extend\": true, \"children\": []},\r\n      {\"resId\": 4, \"parentId\": 0, \"resName\": \"第四象限：不紧急且不重要\", \"extend\": true, \"children\": []}\r\n    ]\r\n  }\r\n  \r\n  const defaultTree4 = {\r\n    \"resId\": 0,\r\n    \"parentId\": null,\r\n    \"resName\": \"根节点\",\r\n    \"extend\": true,\r\n    \"children\": []\r\n  }\r\n  \r\n  export default {\r\n    name: 'TreeChart',\r\n    components: {\r\n      TreeNode\r\n    },\r\n    data() {\r\n      return {\r\n        currentTree: JSON.parse(JSON.stringify(defaultTree4)), // 深拷贝 defaultTree4 作为默认模板\r\n        scale: 1,\r\n        selectedTemplate: 'defaultTree4',\r\n        templates: {\r\n          defaultTree1,\r\n          defaultTree2,\r\n          defaultTree3,\r\n          defaultTree4\r\n        }\r\n      }\r\n    },\r\n    props: {\r\n      readOnly: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n      initialTree: {\r\n        type: Object,\r\n        default: () => JSON.parse(JSON.stringify(defaultTree4))\r\n      }\r\n    },\r\n    methods: {\r\n      //切换模板函数\r\n      changeTemplate() {\r\n        // 切换模板时，直接使用选定模板的深拷贝\r\n        this.currentTree = JSON.parse(JSON.stringify(this.templates[this.selectedTemplate]))\r\n      },\r\n      //新增节点函数\r\n      add(node) {\r\n        const newNode = {\r\n          resId: Date.now(),\r\n          parentId: node.resId,\r\n          resName: '新节点',\r\n          message: '',\r\n          extend: true,\r\n          children: []\r\n        }\r\n        if (!node.children) {\r\n          this.$set(node, 'children', [])\r\n        }\r\n        node.children.push(newNode)\r\n        this.$forceUpdate()\r\n      },\r\n      //更新结点函数\r\n      update(node) {\r\n        console.log('节点已更新:', node)\r\n      },\r\n      //删除结点函数\r\n      remove(node) {\r\n        if (node.resId === 0) {\r\n          alert('根节点不能删除')\r\n          return\r\n        }\r\n        const removeNode = (tree, nodeToRemove) => {\r\n          for (let i = 0; i < tree.length; i++) {\r\n            if (tree[i] === nodeToRemove) {\r\n              tree.splice(i, 1)\r\n              return true\r\n            }\r\n            if (tree[i].children && tree[i].children.length > 0) {\r\n              if (removeNode(tree[i].children, nodeToRemove)) {\r\n                return true\r\n              }\r\n            }\r\n          }\r\n          return false\r\n        }\r\n        removeNode([this.currentTree], node)\r\n        this.$forceUpdate()\r\n      },\r\n      //向后端发送currentTree数据\r\n      saveTree() {\r\n        fetch('/api/save-tree', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(this.currentTree)\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log('树结构已成功保存到后端');\r\n        })\r\n        .catch((error) => {\r\n          console.error('保存树结构时出错:', error);\r\n        });\r\n      },\r\n      //用于从服务器加载树结构数据\r\n      loadTree() {\r\n        fetch('/api/load-tree')\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            this.currentTree = data;\r\n          })\r\n          .catch(error => {\r\n            console.error('加载失败', error);\r\n          });\r\n      }\r\n    },\r\n    mounted() {\r\n      // 组件挂载时默认使用 defaultTree4\r\n      this.currentTree = JSON.parse(JSON.stringify(defaultTree4))\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .tree-chart {\r\n    text-align: center;\r\n  }\r\n  \r\n  .template-selector,\r\n  .zoom-controls {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .tree-container-wrapper {\r\n    overflow: auto;\r\n  }\r\n  \r\n  .tree-container {\r\n    transform-origin: 0 0;\r\n  }\r\n  </style>\r\n    \r\n    <style lang=\"scss\">\r\n  .tree-chart {\r\n    height: 100%;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-top: 50px;\r\n    overflow-x: auto;\r\n    overflow-y: auto;\r\n    min-height: 100vh;\r\n  \r\n    .zoom-controls {\r\n      position: fixed;\r\n      top: 10px;\r\n      right: 10px;\r\n      z-index: 1000;\r\n  \r\n      button {\r\n        margin-left: 5px;\r\n        padding: 5px 10px;\r\n        background-color: #f0f0f0;\r\n        border: 1px solid #ccc;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n  \r\n        &:hover {\r\n          background-color: #e0e0e0;\r\n        }\r\n      }\r\n    }\r\n  \r\n    .tree-container-wrapper {\r\n      width: 100%; // 可以调整这个值来改变容器宽度\r\n      height: 80vh; // 可以调整这个值来改变容器高度\r\n      border: 2px solid #ccc; // 添加边框\r\n      background-color: beige; //背景色\r\n      border-radius: 10px; // 添加圆角\r\n      overflow: auto; // 允许内容溢出时滚动\r\n      margin-top: 20px; \r\n      position: relative; // 添加相对定位\r\n    }\r\n  \r\n    .tree-container {\r\n      transform-origin: center top;\r\n      transition: transform 0.3s ease;\r\n      min-width: 100%;\r\n      min-height: 100%;\r\n      display: flex;\r\n      justify-content: center; // 水平居中\r\n      align-items: flex-start; // 从顶部开始\r\n      justify-content: center;\r\n      padding: 20px;\r\n      box-sizing: border-box;\r\n      position: absolute; // 使用绝对定位\r\n      left: 0; // 将左边缘置于容器中心\r\n      transform: translateX(-50%); // 向左移动自身宽度的一半\r\n    }\r\n  }\r\n  \r\n  // 响应式调整\r\n  @media (max-width: 768px) {\r\n    .tree-chart {\r\n      padding-top: 20px;\r\n  \r\n  \r\n      .tree-container-wrapper {\r\n        width: 100%;\r\n        height: 70vh;\r\n      }\r\n    }\r\n  }\r\n  </style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAY;;EAD3BC,GAAA;EAE4BD,KAAK,EAAC;;gEAExBE,mBAAA,CAA4C;EAApCC,KAAK,EAAC;AAAc,GAAC,QAAM;gEACnCD,mBAAA,CAA4C;EAApCC,KAAK,EAAC;AAAc,GAAC,QAAM;gEACnCD,mBAAA,CAA+C;EAAvCC,KAAK,EAAC;AAAc,GAAC,WAAS;gEACtCD,mBAAA,CAA2C;EAAnCC,KAAK,EAAC;AAAc,GAAC,OAAK;oBAHlCC,UAA4C,EAC5CC,UAA4C,EAC5CC,UAA+C,EAC/CC,UAA2C,C;;EAG1CP,KAAK,EAAC;AAAe;;EAKrBA,KAAK,EAAC;AAAwB;;;uBAdrCQ,mBAAA,CAsBM,OAtBNC,UAsBM,G,CArBQC,MAAA,CAAAC,QAAQ,I,cAApBH,mBAAA,CAOM,OAPNI,UAOM,G,gBANJV,mBAAA,CAKS;IARjB,uBAAAW,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAG0BC,KAAA,CAAAC,gBAAgB,GAAAF,MAAA;IAAGG,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAHnE,IAAAG,UAAA,2C,gBAG0BN,KAAA,CAAAC,gBAAgB,E,OAH1CM,mBAAA,gBAUMpB,mBAAA,CAIM,OAJNqB,UAIM,GAHJrB,mBAAA,CAAyC;IAAhCsB,OAAK,EAAAX,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAU,KAAK;KAAS,IAAE,GAChCvB,mBAAA,CAAsC;IAA7BsB,OAAK,EAAAX,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAU,KAAK;KAAM,IAAE,GAC7BvB,mBAAA,CAAyC;IAAhCsB,OAAK,EAAAX,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,KAAA,CAAAU,KAAK;KAAS,IAAE,E,GAElCvB,mBAAA,CAIM,OAJNwB,UAIM,GAHJxB,mBAAA,CAEM;IAFDF,KAAK,EAAC,gBAAgB;IAAE2B,KAAK,EAhB1CC,eAAA;MAAAC,SAAA,WAgBkEd,KAAA,CAAAU,KAAK;IAAA;MAC7DK,YAAA,CAAsFC,mBAAA;IAA3EC,KAAK,EAAEjB,KAAA,CAAAkB,WAAW;IAAGC,OAAM,EAAEf,QAAA,CAAAgB,GAAG;IAAGC,UAAS,EAAEjB,QAAA,CAAAkB,MAAM;IAAGC,UAAS,EAAEnB,QAAA,CAAAoB;gGAIjFjB,mBAAA,eAAkB,E,CACHZ,MAAA,CAAAC,QAAQ,I,cAAvBH,mBAAA,CAAyD;IAtB/DP,GAAA;IAsBgCuB,OAAK,EAAAX,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAqB,QAAA,IAAArB,QAAA,CAAAqB,QAAA,IAAAtB,IAAA,CAAQ;KAAE,OAAK,KAtBtDI,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}